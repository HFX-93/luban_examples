
'''
  <auto-generated>
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
  </auto-generated>
'''

class Vector2:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.a = Vector4(1,2,3,4)
    def __str__(self):
        return '{%g,%g}' % (self.x, self.y)

    @staticmethod
    def fromJson(_json_):
        x = _json_['x']
        y = _json_['y']
        if (x == None or y == None):
            raise Exception()
        return Vector2(x, y)


class Vector3:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
    def __str__(self):
        return '{%f,%f,%f}' % (self.x, self.y, self.z)
    @staticmethod
    def fromJson(_json_):
        x = _json_['x']
        y = _json_['y']
        z = _json_['z']
        if (x == None or y == None or z == None):
            raise Exception()
        return Vector3(x, y, z)

class Vector4:
    def __init__(self, x, y, z, w):
        self.x = x
        self.y = y
        self.z = z
        self.w = w
    def __str__(self):
        return '{%g,%g,%g,%g}' % (self.x, self.y, self.z, self.w)
        
    @staticmethod
    def fromJson(_json_):
        x = _json_['x']
        y = _json_['y']
        z = _json_['z']
        w = _json_['w']
        if (x == None or y == None or z == None or w == None):
            raise Exception()
        return Vector4(x, y, z, w)



class ai_EExecutor:
    CLIENT = 0
    SERVER = 1


class ai_EKeyType:
    BOOL = 1
    INT = 2
    FLOAT = 3
    STRING = 4
    VECTOR = 5
    ROTATOR = 6
    NAME = 7
    CLASS = 8
    ENUM = 9
    OBJECT = 10


class ai_EFlowAbortMode:
    NONE = 0
    LOWER_PRIORITY = 1
    SELF = 2
    BOTH = 3


class ai_EFinishMode:
    IMMEDIATE = 0
    DELAYED = 1


class ai_ENotifyObserverMode:
    ON_VALUE_CHANGE = 0
    ON_RESULT_CHANGE = 1


class ai_EOperator:
    IS_EQUAL_TO = 0
    IS_NOT_EQUAL_TO = 1
    IS_LESS_THAN = 2
    IS_LESS_THAN_OR_EQUAL_TO = 3
    IS_GREAT_THAN = 4
    IS_GREAT_THAN_OR_EQUAL_TO = 5
    CONTAINS = 6
    NOT_CONTAINS = 7


class common_EBoolOperator:
    AND = 0
    OR = 1


class error_EOperation:
    LOGOUT = 0
    RESTART = 1


class error_EErrorCode:
    OK = 0
    SERVER_NOT_EXISTS = 1
    HAS_BIND_SERVER = 2
    AUTH_FAIL = 3
    NOT_BIND_SERVER = 4
    SERVER_ACCESS_FAIL = 5
    EXAMPLE_FLASH = 6
    EXAMPLE_MSGBOX = 7
    EXAMPLE_DLG_OK = 8
    EXAMPLE_DLG_OK_CANCEL = 9
    ROLE_CREATE_NAME_INVALID_CHAR = 100
    ROLE_CREATE_NAME_EMPTY = 101
    ROLE_CREATE_NAME_EXCEED_MAX_LENGTH = 102
    ROLE_CREATE_ROLE_LIST_FULL = 103
    ROLE_CREATE_INVALID_PROFESSION = 104
    ROLE_CREATE_INVALID_GENDER = 105
    ROLE_NOT_OWNED_BY_USER = 106
    ROLE_LEVEL_NOT_ARRIVE = 107
    PARAM_ILLEGAL = 200
    TEMP_BAG_NOT_EMPTY = 201
    ITEM_CAN_NOT_USE = 202
    CURRENCY_NOT_ENOUGH = 203
    BAG_IS_FULL = 204
    ITEM_NOT_ENOUGH = 205
    ITEM_IN_BAG = 206
    GENDER_NOT_MATCH = 300
    LEVEL_TOO_LOW = 301
    LEVEL_TOO_HIGH = 302
    EXCEED_LIMIT = 303
    OVER_TIME = 304
    SERVER_ERROR = 305
    SKILL_NOT_IN_LIST = 400
    SKILL_NOT_COOLDOWN = 401
    SKILL_TARGET_NOT_EXIST = 402
    SKILL_ANOTHER_CASTING = 403
    SKILL_OUT_OF_DISTANCE = 404
    SKILL_TARGET_CAMP_NOT_MATCH = 405
    SKILL_INVALID_DIRECTION = 406
    SKILL_NOT_IN_SELECT_SHAPE = 407
    SKILL_ENERGY_NOT_ENOUGH = 408
    DIALOG_NODE_NOT_CHOOSEN = 500
    DIALOG_NOT_FINISH = 501
    DIALOG_HAS_FINISH = 502
    QUEST_STAGE_NOT_FINISHED = 503
    QUEST_NOT_DOING = 504
    QUEST_STAGE_NOT_DOING = 505
    QUEST_HAS_ACCEPTED = 506
    MAP_OBJECT_NOT_EXIST = 600
    INTERACTION_OBJECT_NOT_SUPPORT_OPERATION = 601
    HAS_NOT_EQUIP = 602
    HANDHELD_EQUIP_ID_NOT_MATCH = 603
    NOT_AVAILABLE_SUIT_ID = 604
    NO_INTERACTION_COMPONENT = 605
    HAS_INTERACTED = 606
    VIALITY_NOT_ENOUGH = 607
    PLAYER_SESSION_NOT_EXIST = 608
    PLAYER_SESSION_WORLD_PLAYER_NOT_INIT = 609
    MAP_NOT_EXIST = 610
    MAIL_TYPE_ERROR = 700
    MAIL_NOT_EXITST = 701
    MAIL_HAVE_DELETED = 702
    MAIL_AWARD_HAVE_RECEIVED = 703
    MAIL_OPERATE_TYPE_ERROR = 704
    MAIL_CONDITION_NOT_MEET = 705
    MAIL_STATE_ERROR = 706
    MAIL_NO_AWARD = 707
    MAIL_BOX_IS_FULL = 708
    PROP_SCORE_NOT_BIGGER_THAN = 800
    NOT_WEAR_CLOTHES = 801
    NOT_WEAR_SUIT = 802
    SUIT_NOT_UNLOCK = 900
    SUIT_COMPONENT_NOT_UNLOCK = 901
    SUIT_STATE_ERROR = 902
    SUIT_COMPONENT_STATE_ERROR = 903
    SUIT_COMPONENT_NO_NEED_LEARN = 904
    STORE_NOT_ENABLED = 1000
    SHELF_NOT_ENABLED = 1001
    GOODS_NOT_ENABLED = 1002
    GOODS_NOT_IN_CUR_REFRESH = 1003
    RETRY = 1100
    NOT_COOLDOWN = 1101
    SELFIE_UNLOCK = 1200
    SELFIE_ALREADY_UNLOCK = 1201
    SELFIE_LACK_STARTS = 1202
    SELFIE_HAD_REWARD = 1203


class item_EItemQuality:
    WHITE = 0
    GREEN = 1
    BLUE = 2
    PURPLE = 3
    GOLDEN = 4


class item_ECurrencyType:
    DIAMOND = 1
    GOLD = 2
    SILVER = 3
    EXP = 4
    POWER_POINT = 5


class item_EMajorType:
    CURRENCY = 1
    CLOTH = 2
    QUEST = 3
    CONSUMABLES = 4
    TREASURE_BOX = 5
    ACHIEVEMENT_AND_TITLE = 6
    HEAD_FRAME = 7
    VOICE = 8
    ACTION = 9
    EXPANSION = 10
    MATERIAL = 11


class item_EMinorType:
    DIAMOND = 101
    GOLD = 102
    SILVER = 103
    EXP = 104
    POWER_POINT = 105
    HAIR_STYLE = 210
    COAT = 220
    UPPER_JACKET = 230
    TROUSERS = 241
    SKIRT = 242
    SOCKS = 250
    SHOES = 260
    HAIR_ACCESSORY = 271
    HAT = 272
    EARRING = 273
    NECKLACE = 274
    BRACELET = 275
    HAIR_CLASP = 276
    GLOVE = 277
    HANDHELD_OBJECT = 278
    SPECIAL = 279
    BASE_COSMETIC = 281
    EYEBROW_COSMETIC = 282
    EYELASH = 283
    COSMETIC_CONTACT_LENSES = 284
    LIP_COSMETIC = 285
    SKIN_COLOR = 286
    ONE_PIECE_DRESS = 290
    SWITCH_CLOTHES_SCENE = 291
    QUEST = 301
    CAST = 401
    SWORD = 421
    BOW_ARROW = 422
    WANDS = 423
    SPECIAL_TOOL = 424
    FOOD = 403
    TREASURE_BOX = 501
    KEY = 502
    MULTI_CHOOSE_TREASURE_BOX = 503
    ACHIEVEMENT = 601
    TITLE = 602
    AVATAR_FRAME = 701
    VOICE = 801
    IDLE_POSE = 901
    PHOTO_POSE = 902
    BAG = 1001
    FRIEND_CAPACITY = 1002
    CONSTRUCTION_MATERIAL = 1101
    DESIGN_DRAWING = 1102


class item_EClothersStarQualityType:
    ONE = 1
    TWO = 2
    THREE = 3
    FOUR = 4
    FIVE = 5
    SIX = 6
    SEVEN = 7
    EIGHT = 8
    NINE = 9
    TEN = 10


class item_EClothersTag:
    FANG_SHAI = 1
    WU_ZHE = 2


class item_EUseType:
    MANUAL = 0
    AUTO = 1


class item_EClothesHidePartType:
    CHEST = 0
    HEAD = 1
    SPINE_UPPER = 2
    SPINE_LOWER = 3
    HIP = 4
    LEG_UPPER = 5
    LEG_MIDDLE = 6
    LEG_LOWER = 7


class item_EClothesPropertyType:
    JIAN_YUE = 1
    HUA_LI = 2
    KE_AI = 3
    CHENG_SHU = 4
    HUO_PO = 5
    YOU_YA = 6
    QING_CHUN = 7
    XING_GAN = 8
    QING_LIANG = 9
    BAO_NUAN = 10


class item_EItemFunctionType:
    REPLACE_HANDHELD = 0
    USE_DESIGN_DRAWING = 1


class limit_ENamespace:
    ITEM_DAILY_OBTAIN = 1
    TREASURE_DAILY_USE = 2
    STORE_GOODS_LIMIT_BUY = 3


class mail_EMailType:
    GLOBAL = 0
    SYSTEM = 1


class role_EGenderType:
    MALE = 1
    FEMALE = 2


class role_EProfession:
    TEST_PROFESSION = 1



class role_Consts:
    MAX_NAME_LENGTH = 20
    MAX_USER_ROLE_NUM = 10






class ai_Blackboard :

    def __init__(self, _json_):
        if _json_['name'] == None: raise Exception()
        self.name = _json_["name"]
        if _json_['desc'] == None: raise Exception()
        self.desc = _json_["desc"]
        if _json_['parent_name'] == None: raise Exception()
        self.parent_name = _json_["parent_name"]
        if _json_['keys'] == None: raise Exception()
        self.keys = []
        for _ele in _json_["keys"]: _e = ai_BlackboardKey(_ele); self.keys.append(_e)





class ai_BlackboardKey :

    def __init__(self, _json_):
        if _json_['name'] == None: raise Exception()
        self.name = _json_["name"]
        if _json_['desc'] == None: raise Exception()
        self.desc = _json_["desc"]
        if _json_['is_static'] == None: raise Exception()
        self.is_static = _json_["is_static"]
        if _json_['type'] == None: raise Exception()
        self.type = _json_["type"]
        if _json_['type_class_name'] == None: raise Exception()
        self.type_class_name = _json_["type_class_name"]





class ai_BehaviorTree :

    def __init__(self, _json_):
        if _json_['id'] == None: raise Exception()
        self.id = _json_["id"]
        if _json_['name'] == None: raise Exception()
        self.name = _json_["name"]
        if _json_['desc'] == None: raise Exception()
        self.desc = _json_["desc"]
        if _json_['blackboard_id'] == None: raise Exception()
        self.blackboard_id = _json_["blackboard_id"]
        self.root = ai_ComposeNode.fromJson(_json_["root"])





class ai_Node :
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = ai_Node._childrenTypes
        if not childrenTypes:
            childrenTypes = ai_Node._childrenTypes = {
            'UeSetDefaultFocus': ai_UeSetDefaultFocus,
            'ExecuteTimeStatistic': ai_ExecuteTimeStatistic,
            'ChooseTarget': ai_ChooseTarget,
            'KeepFaceTarget': ai_KeepFaceTarget,
            'GetOwnerPlayer': ai_GetOwnerPlayer,
            'UpdateDailyBehaviorProps': ai_UpdateDailyBehaviorProps,
            'UeLoop': ai_UeLoop,
            'UeCooldown': ai_UeCooldown,
            'UeTimeLimit': ai_UeTimeLimit,
            'UeBlackboard': ai_UeBlackboard,
            'UeForceSuccess': ai_UeForceSuccess,
            'IsAtLocation': ai_IsAtLocation,
            'DistanceLessThan': ai_DistanceLessThan,
            'Sequence': ai_Sequence,
            'Selector': ai_Selector,
            'SimpleParallel': ai_SimpleParallel,
            'UeWait': ai_UeWait,
            'UeWaitBlackboardTime': ai_UeWaitBlackboardTime,
            'MoveToTarget': ai_MoveToTarget,
            'ChooseSkill': ai_ChooseSkill,
            'MoveToRandomLocation': ai_MoveToRandomLocation,
            'MoveToLocation': ai_MoveToLocation,
            'DebugPrint': ai_DebugPrint,
    }
        type = _json_['__type__']
        if type != None:
            child = ai_Node._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):
        if _json_['id'] == None: raise Exception()
        self.id = _json_["id"]
        if _json_['node_name'] == None: raise Exception()
        self.node_name = _json_["node_name"]





class ai_Service (ai_Node):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = ai_Service._childrenTypes
        if not childrenTypes:
            childrenTypes = ai_Service._childrenTypes = {
            'UeSetDefaultFocus': ai_UeSetDefaultFocus,
            'ExecuteTimeStatistic': ai_ExecuteTimeStatistic,
            'ChooseTarget': ai_ChooseTarget,
            'KeepFaceTarget': ai_KeepFaceTarget,
            'GetOwnerPlayer': ai_GetOwnerPlayer,
            'UpdateDailyBehaviorProps': ai_UpdateDailyBehaviorProps,
    }
        type = _json_['__type__']
        if type != None:
            child = ai_Service._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):
        ai_Node.__init__(self, _json_)

        pass





class ai_UeSetDefaultFocus (ai_Service):

    def __init__(self, _json_):
        ai_Service.__init__(self, _json_)
        if _json_['keyboard_key'] == None: raise Exception()
        self.keyboard_key = _json_["keyboard_key"]





class ai_ExecuteTimeStatistic (ai_Service):

    def __init__(self, _json_):
        ai_Service.__init__(self, _json_)

        pass





class ai_ChooseTarget (ai_Service):

    def __init__(self, _json_):
        ai_Service.__init__(self, _json_)
        if _json_['result_target_key'] == None: raise Exception()
        self.result_target_key = _json_["result_target_key"]





class ai_KeepFaceTarget (ai_Service):

    def __init__(self, _json_):
        ai_Service.__init__(self, _json_)
        if _json_['target_actor_key'] == None: raise Exception()
        self.target_actor_key = _json_["target_actor_key"]





class ai_GetOwnerPlayer (ai_Service):

    def __init__(self, _json_):
        ai_Service.__init__(self, _json_)
        if _json_['player_actor_key'] == None: raise Exception()
        self.player_actor_key = _json_["player_actor_key"]





class ai_UpdateDailyBehaviorProps (ai_Service):

    def __init__(self, _json_):
        ai_Service.__init__(self, _json_)
        if _json_['satiety_key'] == None: raise Exception()
        self.satiety_key = _json_["satiety_key"]
        if _json_['energy_key'] == None: raise Exception()
        self.energy_key = _json_["energy_key"]
        if _json_['mood_key'] == None: raise Exception()
        self.mood_key = _json_["mood_key"]
        if _json_['satiety_lower_threshold_key'] == None: raise Exception()
        self.satiety_lower_threshold_key = _json_["satiety_lower_threshold_key"]
        if _json_['satiety_upper_threshold_key'] == None: raise Exception()
        self.satiety_upper_threshold_key = _json_["satiety_upper_threshold_key"]
        if _json_['energy_lower_threshold_key'] == None: raise Exception()
        self.energy_lower_threshold_key = _json_["energy_lower_threshold_key"]
        if _json_['energy_upper_threshold_key'] == None: raise Exception()
        self.energy_upper_threshold_key = _json_["energy_upper_threshold_key"]
        if _json_['mood_lower_threshold_key'] == None: raise Exception()
        self.mood_lower_threshold_key = _json_["mood_lower_threshold_key"]
        if _json_['mood_upper_threshold_key'] == None: raise Exception()
        self.mood_upper_threshold_key = _json_["mood_upper_threshold_key"]





class ai_Decorator (ai_Node):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = ai_Decorator._childrenTypes
        if not childrenTypes:
            childrenTypes = ai_Decorator._childrenTypes = {
            'UeLoop': ai_UeLoop,
            'UeCooldown': ai_UeCooldown,
            'UeTimeLimit': ai_UeTimeLimit,
            'UeBlackboard': ai_UeBlackboard,
            'UeForceSuccess': ai_UeForceSuccess,
            'IsAtLocation': ai_IsAtLocation,
            'DistanceLessThan': ai_DistanceLessThan,
    }
        type = _json_['__type__']
        if type != None:
            child = ai_Decorator._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):
        ai_Node.__init__(self, _json_)
        if _json_['flow_abort_mode'] == None: raise Exception()
        self.flow_abort_mode = _json_["flow_abort_mode"]





class ai_UeLoop (ai_Decorator):

    def __init__(self, _json_):
        ai_Decorator.__init__(self, _json_)
        if _json_['num_loops'] == None: raise Exception()
        self.num_loops = _json_["num_loops"]
        if _json_['infinite_loop'] == None: raise Exception()
        self.infinite_loop = _json_["infinite_loop"]
        if _json_['infinite_loop_timeout_time'] == None: raise Exception()
        self.infinite_loop_timeout_time = _json_["infinite_loop_timeout_time"]





class ai_UeCooldown (ai_Decorator):

    def __init__(self, _json_):
        ai_Decorator.__init__(self, _json_)
        if _json_['cooldown_time'] == None: raise Exception()
        self.cooldown_time = _json_["cooldown_time"]





class ai_UeTimeLimit (ai_Decorator):

    def __init__(self, _json_):
        ai_Decorator.__init__(self, _json_)
        if _json_['limit_time'] == None: raise Exception()
        self.limit_time = _json_["limit_time"]





class ai_UeBlackboard (ai_Decorator):

    def __init__(self, _json_):
        ai_Decorator.__init__(self, _json_)
        if _json_['notify_observer'] == None: raise Exception()
        self.notify_observer = _json_["notify_observer"]
        if _json_['blackboard_key'] == None: raise Exception()
        self.blackboard_key = _json_["blackboard_key"]
        self.key_query = ai_KeyQueryOperator.fromJson(_json_["key_query"])





class ai_KeyQueryOperator :
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = ai_KeyQueryOperator._childrenTypes
        if not childrenTypes:
            childrenTypes = ai_KeyQueryOperator._childrenTypes = {
            'IsSet': ai_IsSet,
            'IsNotSet': ai_IsNotSet,
            'BinaryOperator': ai_BinaryOperator,
    }
        type = _json_['__type__']
        if type != None:
            child = ai_KeyQueryOperator._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):

        pass





class ai_IsSet (ai_KeyQueryOperator):

    def __init__(self, _json_):
        ai_KeyQueryOperator.__init__(self, _json_)

        pass





class ai_IsNotSet (ai_KeyQueryOperator):

    def __init__(self, _json_):
        ai_KeyQueryOperator.__init__(self, _json_)

        pass





class ai_BinaryOperator (ai_KeyQueryOperator):

    def __init__(self, _json_):
        ai_KeyQueryOperator.__init__(self, _json_)
        if _json_['oper'] == None: raise Exception()
        self.oper = _json_["oper"]
        self.data = ai_KeyData.fromJson(_json_["data"])





class ai_KeyData :
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = ai_KeyData._childrenTypes
        if not childrenTypes:
            childrenTypes = ai_KeyData._childrenTypes = {
            'FloatKeyData': ai_FloatKeyData,
            'IntKeyData': ai_IntKeyData,
            'StringKeyData': ai_StringKeyData,
            'BlackboardKeyData': ai_BlackboardKeyData,
    }
        type = _json_['__type__']
        if type != None:
            child = ai_KeyData._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):

        pass





class ai_FloatKeyData (ai_KeyData):

    def __init__(self, _json_):
        ai_KeyData.__init__(self, _json_)
        if _json_['value'] == None: raise Exception()
        self.value = _json_["value"]





class ai_IntKeyData (ai_KeyData):

    def __init__(self, _json_):
        ai_KeyData.__init__(self, _json_)
        if _json_['value'] == None: raise Exception()
        self.value = _json_["value"]





class ai_StringKeyData (ai_KeyData):

    def __init__(self, _json_):
        ai_KeyData.__init__(self, _json_)
        if _json_['value'] == None: raise Exception()
        self.value = _json_["value"]





class ai_BlackboardKeyData (ai_KeyData):

    def __init__(self, _json_):
        ai_KeyData.__init__(self, _json_)
        if _json_['value'] == None: raise Exception()
        self.value = _json_["value"]





class ai_UeForceSuccess (ai_Decorator):

    def __init__(self, _json_):
        ai_Decorator.__init__(self, _json_)

        pass





class ai_IsAtLocation (ai_Decorator):

    def __init__(self, _json_):
        ai_Decorator.__init__(self, _json_)
        if _json_['acceptable_radius'] == None: raise Exception()
        self.acceptable_radius = _json_["acceptable_radius"]
        if _json_['keyboard_key'] == None: raise Exception()
        self.keyboard_key = _json_["keyboard_key"]
        if _json_['inverse_condition'] == None: raise Exception()
        self.inverse_condition = _json_["inverse_condition"]





class ai_DistanceLessThan (ai_Decorator):

    def __init__(self, _json_):
        ai_Decorator.__init__(self, _json_)
        if _json_['actor1_key'] == None: raise Exception()
        self.actor1_key = _json_["actor1_key"]
        if _json_['actor2_key'] == None: raise Exception()
        self.actor2_key = _json_["actor2_key"]
        if _json_['distance'] == None: raise Exception()
        self.distance = _json_["distance"]
        if _json_['reverse_result'] == None: raise Exception()
        self.reverse_result = _json_["reverse_result"]





class ai_FlowNode (ai_Node):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = ai_FlowNode._childrenTypes
        if not childrenTypes:
            childrenTypes = ai_FlowNode._childrenTypes = {
            'Sequence': ai_Sequence,
            'Selector': ai_Selector,
            'SimpleParallel': ai_SimpleParallel,
            'UeWait': ai_UeWait,
            'UeWaitBlackboardTime': ai_UeWaitBlackboardTime,
            'MoveToTarget': ai_MoveToTarget,
            'ChooseSkill': ai_ChooseSkill,
            'MoveToRandomLocation': ai_MoveToRandomLocation,
            'MoveToLocation': ai_MoveToLocation,
            'DebugPrint': ai_DebugPrint,
    }
        type = _json_['__type__']
        if type != None:
            child = ai_FlowNode._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):
        ai_Node.__init__(self, _json_)
        if _json_['decorators'] == None: raise Exception()
        self.decorators = []
        for _ele in _json_["decorators"]: _e = ai_Decorator.fromJson(_ele); self.decorators.append(_e)
        if _json_['services'] == None: raise Exception()
        self.services = []
        for _ele in _json_["services"]: _e = ai_Service.fromJson(_ele); self.services.append(_e)





class ai_ComposeNode (ai_FlowNode):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = ai_ComposeNode._childrenTypes
        if not childrenTypes:
            childrenTypes = ai_ComposeNode._childrenTypes = {
            'Sequence': ai_Sequence,
            'Selector': ai_Selector,
            'SimpleParallel': ai_SimpleParallel,
    }
        type = _json_['__type__']
        if type != None:
            child = ai_ComposeNode._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):
        ai_FlowNode.__init__(self, _json_)

        pass





class ai_Sequence (ai_ComposeNode):

    def __init__(self, _json_):
        ai_ComposeNode.__init__(self, _json_)
        if _json_['children'] == None: raise Exception()
        self.children = []
        for _ele in _json_["children"]: _e = ai_FlowNode.fromJson(_ele); self.children.append(_e)





class ai_Selector (ai_ComposeNode):

    def __init__(self, _json_):
        ai_ComposeNode.__init__(self, _json_)
        if _json_['children'] == None: raise Exception()
        self.children = []
        for _ele in _json_["children"]: _e = ai_FlowNode.fromJson(_ele); self.children.append(_e)





class ai_SimpleParallel (ai_ComposeNode):

    def __init__(self, _json_):
        ai_ComposeNode.__init__(self, _json_)
        if _json_['finish_mode'] == None: raise Exception()
        self.finish_mode = _json_["finish_mode"]
        self.main_task = ai_Task.fromJson(_json_["main_task"])
        self.background_node = ai_FlowNode.fromJson(_json_["background_node"])





class ai_Task (ai_FlowNode):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = ai_Task._childrenTypes
        if not childrenTypes:
            childrenTypes = ai_Task._childrenTypes = {
            'UeWait': ai_UeWait,
            'UeWaitBlackboardTime': ai_UeWaitBlackboardTime,
            'MoveToTarget': ai_MoveToTarget,
            'ChooseSkill': ai_ChooseSkill,
            'MoveToRandomLocation': ai_MoveToRandomLocation,
            'MoveToLocation': ai_MoveToLocation,
            'DebugPrint': ai_DebugPrint,
    }
        type = _json_['__type__']
        if type != None:
            child = ai_Task._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):
        ai_FlowNode.__init__(self, _json_)
        if _json_['ignore_restart_self'] == None: raise Exception()
        self.ignore_restart_self = _json_["ignore_restart_self"]





class ai_UeWait (ai_Task):

    def __init__(self, _json_):
        ai_Task.__init__(self, _json_)
        if _json_['wait_time'] == None: raise Exception()
        self.wait_time = _json_["wait_time"]
        if _json_['random_deviation'] == None: raise Exception()
        self.random_deviation = _json_["random_deviation"]





class ai_UeWaitBlackboardTime (ai_Task):

    def __init__(self, _json_):
        ai_Task.__init__(self, _json_)
        if _json_['blackboard_key'] == None: raise Exception()
        self.blackboard_key = _json_["blackboard_key"]





class ai_MoveToTarget (ai_Task):

    def __init__(self, _json_):
        ai_Task.__init__(self, _json_)
        if _json_['target_actor_key'] == None: raise Exception()
        self.target_actor_key = _json_["target_actor_key"]
        if _json_['acceptable_radius'] == None: raise Exception()
        self.acceptable_radius = _json_["acceptable_radius"]





class ai_ChooseSkill (ai_Task):

    def __init__(self, _json_):
        ai_Task.__init__(self, _json_)
        if _json_['target_actor_key'] == None: raise Exception()
        self.target_actor_key = _json_["target_actor_key"]
        if _json_['result_skill_id_key'] == None: raise Exception()
        self.result_skill_id_key = _json_["result_skill_id_key"]





class ai_MoveToRandomLocation (ai_Task):

    def __init__(self, _json_):
        ai_Task.__init__(self, _json_)
        if _json_['origin_position_key'] == None: raise Exception()
        self.origin_position_key = _json_["origin_position_key"]
        if _json_['radius'] == None: raise Exception()
        self.radius = _json_["radius"]





class ai_MoveToLocation (ai_Task):

    def __init__(self, _json_):
        ai_Task.__init__(self, _json_)
        if _json_['location'] == None: raise Exception()
        self.location = Vector3.fromJson(_json_["location"])
        if _json_['acceptable_radius'] == None: raise Exception()
        self.acceptable_radius = _json_["acceptable_radius"]





class ai_DebugPrint (ai_Task):

    def __init__(self, _json_):
        ai_Task.__init__(self, _json_)
        if _json_['text'] == None: raise Exception()
        self.text = _json_["text"]





class blueprint_Clazz :
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = blueprint_Clazz._childrenTypes
        if not childrenTypes:
            childrenTypes = blueprint_Clazz._childrenTypes = {
            'Interface': blueprint_Interface,
            'NormalClazz': blueprint_NormalClazz,
            'EnumClazz': blueprint_EnumClazz,
    }
        type = _json_['__type__']
        if type != None:
            child = blueprint_Clazz._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):
        if _json_['name'] == None: raise Exception()
        self.name = _json_["name"]
        if _json_['desc'] == None: raise Exception()
        self.desc = _json_["desc"]
        if _json_['parents'] == None: raise Exception()
        self.parents = []
        for _ele in _json_["parents"]: _e = blueprint_Clazz.fromJson(_ele); self.parents.append(_e)
        if _json_['methods'] == None: raise Exception()
        self.methods = []
        for _ele in _json_["methods"]: _e = blueprint_Method.fromJson(_ele); self.methods.append(_e)





class blueprint_Method :
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = blueprint_Method._childrenTypes
        if not childrenTypes:
            childrenTypes = blueprint_Method._childrenTypes = {
            'AbstraceMethod': blueprint_AbstraceMethod,
            'ExternalMethod': blueprint_ExternalMethod,
            'BlueprintMethod': blueprint_BlueprintMethod,
    }
        type = _json_['__type__']
        if type != None:
            child = blueprint_Method._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):
        if _json_['name'] == None: raise Exception()
        self.name = _json_["name"]
        if _json_['desc'] == None: raise Exception()
        self.desc = _json_["desc"]
        if _json_['is_static'] == None: raise Exception()
        self.is_static = _json_["is_static"]
        if _json_['return_type'] == None: raise Exception()
        self.return_type = _json_["return_type"]
        if _json_['parameters'] == None: raise Exception()
        self.parameters = []
        for _ele in _json_["parameters"]: _e = blueprint_ParamInfo(_ele); self.parameters.append(_e)





class blueprint_ParamInfo :

    def __init__(self, _json_):
        if _json_['name'] == None: raise Exception()
        self.name = _json_["name"]
        if _json_['type'] == None: raise Exception()
        self.type = _json_["type"]
        if _json_['is_ref'] == None: raise Exception()
        self.is_ref = _json_["is_ref"]





class blueprint_AbstraceMethod (blueprint_Method):

    def __init__(self, _json_):
        blueprint_Method.__init__(self, _json_)

        pass





class blueprint_ExternalMethod (blueprint_Method):

    def __init__(self, _json_):
        blueprint_Method.__init__(self, _json_)

        pass





class blueprint_BlueprintMethod (blueprint_Method):

    def __init__(self, _json_):
        blueprint_Method.__init__(self, _json_)

        pass





class blueprint_Interface (blueprint_Clazz):

    def __init__(self, _json_):
        blueprint_Clazz.__init__(self, _json_)

        pass





class blueprint_NormalClazz (blueprint_Clazz):

    def __init__(self, _json_):
        blueprint_Clazz.__init__(self, _json_)
        if _json_['is_abstract'] == None: raise Exception()
        self.is_abstract = _json_["is_abstract"]
        if _json_['fields'] == None: raise Exception()
        self.fields = []
        for _ele in _json_["fields"]: _e = blueprint_Field(_ele); self.fields.append(_e)





class blueprint_Field :

    def __init__(self, _json_):
        if _json_['name'] == None: raise Exception()
        self.name = _json_["name"]
        if _json_['type'] == None: raise Exception()
        self.type = _json_["type"]
        if _json_['desc'] == None: raise Exception()
        self.desc = _json_["desc"]





class blueprint_EnumClazz (blueprint_Clazz):

    def __init__(self, _json_):
        blueprint_Clazz.__init__(self, _json_)
        if _json_['enums'] == None: raise Exception()
        self.enums = []
        for _ele in _json_["enums"]: _e = blueprint_EnumField(_ele); self.enums.append(_e)





class blueprint_EnumField :

    def __init__(self, _json_):
        if _json_['name'] == None: raise Exception()
        self.name = _json_["name"]
        if _json_['value'] == None: raise Exception()
        self.value = _json_["value"]





class bonus_DropInfo :

    def __init__(self, _json_):
        if _json_['id'] == None: raise Exception()
        self.id = _json_["id"]
        if _json_['desc'] == None: raise Exception()
        self.desc = _json_["desc"]
        if _json_['client_show_items'] == None: raise Exception()
        self.client_show_items = []
        for _ele in _json_["client_show_items"]: _e = bonus_ShowItemInfo(_ele); self.client_show_items.append(_e)
        self.bonus = bonus_Bonus.fromJson(_json_["bonus"])





class bonus_ShowItemInfo :

    def __init__(self, _json_):
        if _json_['item_id'] == None: raise Exception()
        self.item_id = _json_["item_id"]
        if _json_['item_num'] == None: raise Exception()
        self.item_num = _json_["item_num"]





class bonus_Bonus :
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = bonus_Bonus._childrenTypes
        if not childrenTypes:
            childrenTypes = bonus_Bonus._childrenTypes = {
            'OneItem': bonus_OneItem,
            'OneItems': bonus_OneItems,
            'Item': bonus_Item,
            'Items': bonus_Items,
            'CoefficientItem': bonus_CoefficientItem,
            'WeightItems': bonus_WeightItems,
            'ProbabilityItems': bonus_ProbabilityItems,
            'MultiBonus': bonus_MultiBonus,
            'ProbabilityBonus': bonus_ProbabilityBonus,
            'WeightBonus': bonus_WeightBonus,
            'DropBonus': bonus_DropBonus,
    }
        type = _json_['__type__']
        if type != None:
            child = bonus_Bonus._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):

        pass





class bonus_OneItem (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        if _json_['item_id'] == None: raise Exception()
        self.item_id = _json_["item_id"]





class bonus_OneItems (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        if _json_['items'] == None: raise Exception()
        self.items = _json_["items"]





class bonus_Item (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        if _json_['item_id'] == None: raise Exception()
        self.item_id = _json_["item_id"]
        if _json_['amount'] == None: raise Exception()
        self.amount = _json_["amount"]





class bonus_Items (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        if _json_['item_list'] == None: raise Exception()
        self.item_list = []
        for _ele in _json_["item_list"]: _e = bonus_Item(_ele); self.item_list.append(_e)





class bonus_CoefficientItem (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        if _json_['bonus_id'] == None: raise Exception()
        self.bonus_id = _json_["bonus_id"]
        if _json_['bonus_list'] == None: raise Exception()
        self.bonus_list = bonus_Items(_json_["bonus_list"])





class bonus_WeightItems (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        if _json_['item_list'] == None: raise Exception()
        self.item_list = []
        for _ele in _json_["item_list"]: _e = bonus_WeightItemInfo(_ele); self.item_list.append(_e)





class bonus_WeightItemInfo :

    def __init__(self, _json_):
        if _json_['item_id'] == None: raise Exception()
        self.item_id = _json_["item_id"]
        if _json_['num'] == None: raise Exception()
        self.num = _json_["num"]
        if _json_['weight'] == None: raise Exception()
        self.weight = _json_["weight"]





class bonus_ProbabilityItems (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        if _json_['item_list'] == None: raise Exception()
        self.item_list = []
        for _ele in _json_["item_list"]: _e = bonus_ProbabilityItemInfo(_ele); self.item_list.append(_e)





class bonus_ProbabilityItemInfo :

    def __init__(self, _json_):
        if _json_['item_id'] == None: raise Exception()
        self.item_id = _json_["item_id"]
        if _json_['num'] == None: raise Exception()
        self.num = _json_["num"]
        if _json_['probability'] == None: raise Exception()
        self.probability = _json_["probability"]





class bonus_MultiBonus (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        if _json_['bonuses'] == None: raise Exception()
        self.bonuses = []
        for _ele in _json_["bonuses"]: _e = bonus_Bonus.fromJson(_ele); self.bonuses.append(_e)





class bonus_ProbabilityBonus (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        if _json_['bonuses'] == None: raise Exception()
        self.bonuses = []
        for _ele in _json_["bonuses"]: _e = bonus_ProbabilityBonusInfo(_ele); self.bonuses.append(_e)





class bonus_ProbabilityBonusInfo :

    def __init__(self, _json_):
        self.bonus = bonus_Bonus.fromJson(_json_["bonus"])
        if _json_['probability'] == None: raise Exception()
        self.probability = _json_["probability"]





class bonus_WeightBonus (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        if _json_['bonuses'] == None: raise Exception()
        self.bonuses = []
        for _ele in _json_["bonuses"]: _e = bonus_WeightBonusInfo(_ele); self.bonuses.append(_e)





class bonus_WeightBonusInfo :

    def __init__(self, _json_):
        self.bonus = bonus_Bonus.fromJson(_json_["bonus"])
        if _json_['weight'] == None: raise Exception()
        self.weight = _json_["weight"]





class bonus_DropBonus (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        if _json_['id'] == None: raise Exception()
        self.id = _json_["id"]





class common_GlobalConfig :

    def __init__(self, _json_):
        if _json_['bag_capacity'] == None: raise Exception()
        self.bag_capacity = _json_["bag_capacity"]
        if _json_['bag_capacity_special'] == None: raise Exception()
        self.bag_capacity_special = _json_["bag_capacity_special"]
        if _json_['bag_temp_expendable_capacity'] == None: raise Exception()
        self.bag_temp_expendable_capacity = _json_["bag_temp_expendable_capacity"]
        if _json_['bag_temp_tool_capacity'] == None: raise Exception()
        self.bag_temp_tool_capacity = _json_["bag_temp_tool_capacity"]
        if _json_['bag_init_capacity'] == None: raise Exception()
        self.bag_init_capacity = _json_["bag_init_capacity"]
        if _json_['quick_bag_capacity'] == None: raise Exception()
        self.quick_bag_capacity = _json_["quick_bag_capacity"]
        if _json_['cloth_bag_capacity'] == None: raise Exception()
        self.cloth_bag_capacity = _json_["cloth_bag_capacity"]
        if _json_['cloth_bag_init_capacity'] == None: raise Exception()
        self.cloth_bag_init_capacity = _json_["cloth_bag_init_capacity"]
        if _json_['cloth_bag_capacity_special'] == None: raise Exception()
        self.cloth_bag_capacity_special = _json_["cloth_bag_capacity_special"]
        if _json_["bag_init_items_drop_id"] != None: self.bag_init_items_drop_id = _json_["bag_init_items_drop_id"]
        if _json_['mail_box_capacity'] == None: raise Exception()
        self.mail_box_capacity = _json_["mail_box_capacity"]
        if _json_['damage_param_c'] == None: raise Exception()
        self.damage_param_c = _json_["damage_param_c"]
        if _json_['damage_param_e'] == None: raise Exception()
        self.damage_param_e = _json_["damage_param_e"]
        if _json_['damage_param_f'] == None: raise Exception()
        self.damage_param_f = _json_["damage_param_f"]
        if _json_['damage_param_d'] == None: raise Exception()
        self.damage_param_d = _json_["damage_param_d"]
        if _json_['role_speed'] == None: raise Exception()
        self.role_speed = _json_["role_speed"]
        if _json_['monster_speed'] == None: raise Exception()
        self.monster_speed = _json_["monster_speed"]
        if _json_['init_energy'] == None: raise Exception()
        self.init_energy = _json_["init_energy"]
        if _json_['init_viality'] == None: raise Exception()
        self.init_viality = _json_["init_viality"]
        if _json_['max_viality'] == None: raise Exception()
        self.max_viality = _json_["max_viality"]
        if _json_['per_viality_recovery_time'] == None: raise Exception()
        self.per_viality_recovery_time = _json_["per_viality_recovery_time"]





class common_Dummy :

    def __init__(self, _json_):
        if _json_['id'] == None: raise Exception()
        self.id = _json_["id"]
        self.limit = limit_LimitBase.fromJson(_json_["limit"])





class limit_LimitBase :
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = limit_LimitBase._childrenTypes
        if not childrenTypes:
            childrenTypes = limit_LimitBase._childrenTypes = {
            'DailyLimit': limit_DailyLimit,
            'MultiDayLimit': limit_MultiDayLimit,
            'WeeklyLimit': limit_WeeklyLimit,
            'MonthlyLimit': limit_MonthlyLimit,
            'CoolDown': limit_CoolDown,
            'GroupCoolDown': limit_GroupCoolDown,
    }
        type = _json_['__type__']
        if type != None:
            child = limit_LimitBase._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):

        pass





class limit_DailyLimitBase (limit_LimitBase):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = limit_DailyLimitBase._childrenTypes
        if not childrenTypes:
            childrenTypes = limit_DailyLimitBase._childrenTypes = {
            'DailyLimit': limit_DailyLimit,
    }
        type = _json_['__type__']
        if type != None:
            child = limit_DailyLimitBase._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):
        limit_LimitBase.__init__(self, _json_)

        pass





class limit_DailyLimit (limit_DailyLimitBase):

    def __init__(self, _json_):
        limit_DailyLimitBase.__init__(self, _json_)
        if _json_['num'] == None: raise Exception()
        self.num = _json_["num"]





class limit_MultiDayLimit (limit_LimitBase):

    def __init__(self, _json_):
        limit_LimitBase.__init__(self, _json_)
        if _json_['day'] == None: raise Exception()
        self.day = _json_["day"]
        if _json_['num'] == None: raise Exception()
        self.num = _json_["num"]





class limit_WeeklyLimit (limit_LimitBase):

    def __init__(self, _json_):
        limit_LimitBase.__init__(self, _json_)
        if _json_['num'] == None: raise Exception()
        self.num = _json_["num"]





class limit_MonthlyLimit (limit_LimitBase):

    def __init__(self, _json_):
        limit_LimitBase.__init__(self, _json_)
        if _json_['num'] == None: raise Exception()
        self.num = _json_["num"]





class limit_CoolDown (limit_LimitBase):

    def __init__(self, _json_):
        limit_LimitBase.__init__(self, _json_)
        if _json_['duration'] == None: raise Exception()
        self.duration = _json_["duration"]





class limit_GroupCoolDown (limit_LimitBase):

    def __init__(self, _json_):
        limit_LimitBase.__init__(self, _json_)
        if _json_['group_id'] == None: raise Exception()
        self.group_id = _json_["group_id"]
        if _json_['duration'] == None: raise Exception()
        self.duration = _json_["duration"]





class error_ErrorInfo :

    def __init__(self, _json_):
        if _json_['code'] == None: raise Exception()
        self.code = _json_["code"]
        if _json_['desc'] == None: raise Exception()
        self.desc = _json_["desc"]
        self.style = error_ErrorStyle.fromJson(_json_["style"])





class error_ErrorStyle :
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = error_ErrorStyle._childrenTypes
        if not childrenTypes:
            childrenTypes = error_ErrorStyle._childrenTypes = {
            'ErrorStyleTip': error_ErrorStyleTip,
            'ErrorStyleMsgbox': error_ErrorStyleMsgbox,
            'ErrorStyleDlgOk': error_ErrorStyleDlgOk,
            'ErrorStyleDlgOkCancel': error_ErrorStyleDlgOkCancel,
    }
        type = _json_['__type__']
        if type != None:
            child = error_ErrorStyle._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):

        pass





class error_ErrorStyleTip (error_ErrorStyle):

    def __init__(self, _json_):
        error_ErrorStyle.__init__(self, _json_)

        pass





class error_ErrorStyleMsgbox (error_ErrorStyle):

    def __init__(self, _json_):
        error_ErrorStyle.__init__(self, _json_)
        if _json_['btn_name'] == None: raise Exception()
        self.btn_name = _json_["btn_name"]
        if _json_['operation'] == None: raise Exception()
        self.operation = _json_["operation"]





class error_ErrorStyleDlgOk (error_ErrorStyle):

    def __init__(self, _json_):
        error_ErrorStyle.__init__(self, _json_)
        if _json_['btn_name'] == None: raise Exception()
        self.btn_name = _json_["btn_name"]





class error_ErrorStyleDlgOkCancel (error_ErrorStyle):

    def __init__(self, _json_):
        error_ErrorStyle.__init__(self, _json_)
        if _json_['btn1_name'] == None: raise Exception()
        self.btn1_name = _json_["btn1_name"]
        if _json_['btn2_name'] == None: raise Exception()
        self.btn2_name = _json_["btn2_name"]





class error_CodeInfo :

    def __init__(self, _json_):
        if _json_['code'] == None: raise Exception()
        self.code = _json_["code"]
        if _json_['key'] == None: raise Exception()
        self.key = _json_["key"]





class item_Item :

    def __init__(self, _json_):
        if _json_['id'] == None: raise Exception()
        self.id = _json_["id"]
        if _json_['name'] == None: raise Exception()
        self.name = _json_["name"]
        if _json_['major_type'] == None: raise Exception()
        self.major_type = _json_["major_type"]
        if _json_['minor_type'] == None: raise Exception()
        self.minor_type = _json_["minor_type"]
        if _json_['max_pile_num'] == None: raise Exception()
        self.max_pile_num = _json_["max_pile_num"]
        if _json_['quality'] == None: raise Exception()
        self.quality = _json_["quality"]
        if _json_['icon'] == None: raise Exception()
        self.icon = _json_["icon"]
        if _json_['icon_backgroud'] == None: raise Exception()
        self.icon_backgroud = _json_["icon_backgroud"]
        if _json_['icon_mask'] == None: raise Exception()
        self.icon_mask = _json_["icon_mask"]
        if _json_['desc'] == None: raise Exception()
        self.desc = _json_["desc"]
        if _json_['show_order'] == None: raise Exception()
        self.show_order = _json_["show_order"]
        if _json_['quantifier'] == None: raise Exception()
        self.quantifier = _json_["quantifier"]
        if _json_['show_in_bag'] == None: raise Exception()
        self.show_in_bag = _json_["show_in_bag"]
        if _json_['min_show_level'] == None: raise Exception()
        self.min_show_level = _json_["min_show_level"]
        if _json_['batch_usable'] == None: raise Exception()
        self.batch_usable = _json_["batch_usable"]
        if _json_['progress_time_when_use'] == None: raise Exception()
        self.progress_time_when_use = _json_["progress_time_when_use"]
        if _json_['show_hint_when_use'] == None: raise Exception()
        self.show_hint_when_use = _json_["show_hint_when_use"]
        if _json_['droppable'] == None: raise Exception()
        self.droppable = _json_["droppable"]
        if _json_["price"] != None: self.price = _json_["price"]
        if _json_['use_type'] == None: raise Exception()
        self.use_type = _json_["use_type"]
        if _json_["level_up_id"] != None: self.level_up_id = _json_["level_up_id"]





class item_ItemFunction :

    def __init__(self, _json_):
        if _json_['minor_type'] == None: raise Exception()
        self.minor_type = _json_["minor_type"]
        if _json_['func_type'] == None: raise Exception()
        self.func_type = _json_["func_type"]
        if _json_['method'] == None: raise Exception()
        self.method = _json_["method"]
        if _json_['close_bag_ui'] == None: raise Exception()
        self.close_bag_ui = _json_["close_bag_ui"]





class item_ItemExtra :
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = item_ItemExtra._childrenTypes
        if not childrenTypes:
            childrenTypes = item_ItemExtra._childrenTypes = {
            'TreasureBox': item_TreasureBox,
            'InteractionItem': item_InteractionItem,
            'Clothes': item_Clothes,
            'DesignDrawing': item_DesignDrawing,
            'Dymmy': item_Dymmy,
    }
        type = _json_['__type__']
        if type != None:
            child = item_ItemExtra._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):
        if _json_['id'] == None: raise Exception()
        self.id = _json_["id"]





class item_TreasureBox (item_ItemExtra):

    def __init__(self, _json_):
        item_ItemExtra.__init__(self, _json_)
        if _json_["key_item_id"] != None: self.key_item_id = _json_["key_item_id"]
        if _json_['open_level'] == None: raise Exception()
        self.open_level = condition_MinLevel(_json_["open_level"])
        if _json_['use_on_obtain'] == None: raise Exception()
        self.use_on_obtain = _json_["use_on_obtain"]
        if _json_['drop_ids'] == None: raise Exception()
        self.drop_ids = _json_["drop_ids"]
        if _json_['choose_list'] == None: raise Exception()
        self.choose_list = []
        for _ele in _json_["choose_list"]: _e = item_ChooseOneBonus(_ele); self.choose_list.append(_e)





class condition_Condition :
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = condition_Condition._childrenTypes
        if not childrenTypes:
            childrenTypes = condition_Condition._childrenTypes = {
            'TimeRange': condition_TimeRange,
            'MultiRoleCondition': condition_MultiRoleCondition,
            'GenderLimit': condition_GenderLimit,
            'MinLevel': condition_MinLevel,
            'MaxLevel': condition_MaxLevel,
            'MinMaxLevel': condition_MinMaxLevel,
            'ClothesPropertyScoreGreaterThan': condition_ClothesPropertyScoreGreaterThan,
            'ContainsItem': condition_ContainsItem,
    }
        type = _json_['__type__']
        if type != None:
            child = condition_Condition._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):

        pass





class condition_TimeRange (condition_Condition):

    def __init__(self, _json_):
        condition_Condition.__init__(self, _json_)
        if _json_['date_time_range'] == None: raise Exception()
        self.date_time_range = common_DateTimeRange(_json_["date_time_range"])





class common_DateTimeRange :

    def __init__(self, _json_):
        if _json_["start_time"] != None: self.start_time = _json_["start_time"]
        if _json_["end_time"] != None: self.end_time = _json_["end_time"]





class condition_RoleCondition (condition_Condition):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = condition_RoleCondition._childrenTypes
        if not childrenTypes:
            childrenTypes = condition_RoleCondition._childrenTypes = {
            'MultiRoleCondition': condition_MultiRoleCondition,
            'GenderLimit': condition_GenderLimit,
            'MinLevel': condition_MinLevel,
            'MaxLevel': condition_MaxLevel,
            'MinMaxLevel': condition_MinMaxLevel,
            'ClothesPropertyScoreGreaterThan': condition_ClothesPropertyScoreGreaterThan,
            'ContainsItem': condition_ContainsItem,
    }
        type = _json_['__type__']
        if type != None:
            child = condition_RoleCondition._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):
        condition_Condition.__init__(self, _json_)

        pass





class condition_MultiRoleCondition (condition_RoleCondition):

    def __init__(self, _json_):
        condition_RoleCondition.__init__(self, _json_)
        if _json_['conditions'] == None: raise Exception()
        self.conditions = []
        for _ele in _json_["conditions"]: _e = condition_RoleCondition.fromJson(_ele); self.conditions.append(_e)





class condition_BoolRoleCondition (condition_RoleCondition):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = condition_BoolRoleCondition._childrenTypes
        if not childrenTypes:
            childrenTypes = condition_BoolRoleCondition._childrenTypes = {
            'GenderLimit': condition_GenderLimit,
            'MinLevel': condition_MinLevel,
            'MaxLevel': condition_MaxLevel,
            'MinMaxLevel': condition_MinMaxLevel,
            'ClothesPropertyScoreGreaterThan': condition_ClothesPropertyScoreGreaterThan,
    }
        type = _json_['__type__']
        if type != None:
            child = condition_BoolRoleCondition._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):
        condition_RoleCondition.__init__(self, _json_)

        pass





class condition_GenderLimit (condition_BoolRoleCondition):

    def __init__(self, _json_):
        condition_BoolRoleCondition.__init__(self, _json_)
        if _json_['gender'] == None: raise Exception()
        self.gender = _json_["gender"]





class condition_MinLevel (condition_BoolRoleCondition):

    def __init__(self, _json_):
        condition_BoolRoleCondition.__init__(self, _json_)
        if _json_['level'] == None: raise Exception()
        self.level = _json_["level"]





class condition_MaxLevel (condition_BoolRoleCondition):

    def __init__(self, _json_):
        condition_BoolRoleCondition.__init__(self, _json_)
        if _json_['level'] == None: raise Exception()
        self.level = _json_["level"]





class condition_MinMaxLevel (condition_BoolRoleCondition):

    def __init__(self, _json_):
        condition_BoolRoleCondition.__init__(self, _json_)
        if _json_['min'] == None: raise Exception()
        self.min = _json_["min"]
        if _json_['max'] == None: raise Exception()
        self.max = _json_["max"]





class condition_ClothesPropertyScoreGreaterThan (condition_BoolRoleCondition):

    def __init__(self, _json_):
        condition_BoolRoleCondition.__init__(self, _json_)
        if _json_['prop'] == None: raise Exception()
        self.prop = _json_["prop"]
        if _json_['value'] == None: raise Exception()
        self.value = _json_["value"]





class condition_ContainsItem (condition_RoleCondition):

    def __init__(self, _json_):
        condition_RoleCondition.__init__(self, _json_)
        if _json_['item_id'] == None: raise Exception()
        self.item_id = _json_["item_id"]
        if _json_['num'] == None: raise Exception()
        self.num = _json_["num"]
        if _json_['reverse'] == None: raise Exception()
        self.reverse = _json_["reverse"]





class item_ChooseOneBonus :

    def __init__(self, _json_):
        if _json_['drop_id'] == None: raise Exception()
        self.drop_id = _json_["drop_id"]
        if _json_['is_unique'] == None: raise Exception()
        self.is_unique = _json_["is_unique"]





class item_InteractionItem (item_ItemExtra):

    def __init__(self, _json_):
        item_ItemExtra.__init__(self, _json_)
        if _json_["attack_num"] != None: self.attack_num = _json_["attack_num"]
        if _json_['holding_static_mesh'] == None: raise Exception()
        self.holding_static_mesh = _json_["holding_static_mesh"]
        if _json_['holding_static_mesh_mat'] == None: raise Exception()
        self.holding_static_mesh_mat = _json_["holding_static_mesh_mat"]





class item_Clothes (item_ItemExtra):

    def __init__(self, _json_):
        item_ItemExtra.__init__(self, _json_)
        if _json_['attack'] == None: raise Exception()
        self.attack = _json_["attack"]
        if _json_['hp'] == None: raise Exception()
        self.hp = _json_["hp"]
        if _json_['energy_limit'] == None: raise Exception()
        self.energy_limit = _json_["energy_limit"]
        if _json_['energy_resume'] == None: raise Exception()
        self.energy_resume = _json_["energy_resume"]





class item_DesignDrawing (item_ItemExtra):

    def __init__(self, _json_):
        item_ItemExtra.__init__(self, _json_)
        if _json_['learn_component_id'] == None: raise Exception()
        self.learn_component_id = _json_["learn_component_id"]





class item_Dymmy (item_ItemExtra):

    def __init__(self, _json_):
        item_ItemExtra.__init__(self, _json_)
        self.cost = cost_Cost.fromJson(_json_["cost"])





class cost_Cost :
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = cost_Cost._childrenTypes
        if not childrenTypes:
            childrenTypes = cost_Cost._childrenTypes = {
            'CostCurrency': cost_CostCurrency,
            'CostCurrencies': cost_CostCurrencies,
            'CostOneItem': cost_CostOneItem,
            'CostItem': cost_CostItem,
            'CostItems': cost_CostItems,
    }
        type = _json_['__type__']
        if type != None:
            child = cost_Cost._childrenTypes.get(type)
            if child != None:
                return  child(_json_)
            else:
                raise Exception()
        else:
            return None

    def __init__(self, _json_):

        pass





class cost_CostCurrency (cost_Cost):

    def __init__(self, _json_):
        cost_Cost.__init__(self, _json_)
        if _json_['type'] == None: raise Exception()
        self.type = _json_["type"]
        if _json_['num'] == None: raise Exception()
        self.num = _json_["num"]





class cost_CostCurrencies (cost_Cost):

    def __init__(self, _json_):
        cost_Cost.__init__(self, _json_)
        if _json_['currencies'] == None: raise Exception()
        self.currencies = []
        for _ele in _json_["currencies"]: _e = cost_CostCurrency(_ele); self.currencies.append(_e)





class cost_CostOneItem (cost_Cost):

    def __init__(self, _json_):
        cost_Cost.__init__(self, _json_)
        if _json_['item_id'] == None: raise Exception()
        self.item_id = _json_["item_id"]





class cost_CostItem (cost_Cost):

    def __init__(self, _json_):
        cost_Cost.__init__(self, _json_)
        if _json_['item_id'] == None: raise Exception()
        self.item_id = _json_["item_id"]
        if _json_['amount'] == None: raise Exception()
        self.amount = _json_["amount"]





class cost_CostItems (cost_Cost):

    def __init__(self, _json_):
        cost_Cost.__init__(self, _json_)
        if _json_['item_list'] == None: raise Exception()
        self.item_list = []
        for _ele in _json_["item_list"]: _e = cost_CostItem(_ele); self.item_list.append(_e)





class mail_SystemMail :

    def __init__(self, _json_):
        if _json_['id'] == None: raise Exception()
        self.id = _json_["id"]
        if _json_['title'] == None: raise Exception()
        self.title = _json_["title"]
        if _json_['sender'] == None: raise Exception()
        self.sender = _json_["sender"]
        if _json_['content'] == None: raise Exception()
        self.content = _json_["content"]
        if _json_['award'] == None: raise Exception()
        self.award = _json_["award"]





class mail_GlobalMail :

    def __init__(self, _json_):
        if _json_['id'] == None: raise Exception()
        self.id = _json_["id"]
        if _json_['title'] == None: raise Exception()
        self.title = _json_["title"]
        if _json_['sender'] == None: raise Exception()
        self.sender = _json_["sender"]
        if _json_['content'] == None: raise Exception()
        self.content = _json_["content"]
        if _json_['award'] == None: raise Exception()
        self.award = _json_["award"]
        if _json_['all_server'] == None: raise Exception()
        self.all_server = _json_["all_server"]
        if _json_['server_list'] == None: raise Exception()
        self.server_list = _json_["server_list"]
        if _json_['platform'] == None: raise Exception()
        self.platform = _json_["platform"]
        if _json_['channel'] == None: raise Exception()
        self.channel = _json_["channel"]
        if _json_['min_max_level'] == None: raise Exception()
        self.min_max_level = condition_MinMaxLevel(_json_["min_max_level"])
        if _json_['register_time'] == None: raise Exception()
        self.register_time = condition_TimeRange(_json_["register_time"])
        if _json_['mail_time'] == None: raise Exception()
        self.mail_time = condition_TimeRange(_json_["mail_time"])





class role_LevelExpAttr :

    def __init__(self, _json_):
        if _json_['level'] == None: raise Exception()
        self.level = _json_["level"]
        if _json_['need_exp'] == None: raise Exception()
        self.need_exp = _json_["need_exp"]
        if _json_['clothes_attrs'] == None: raise Exception()
        self.clothes_attrs = _json_["clothes_attrs"]





class role_LevelBonus :

    def __init__(self, _json_):
        if _json_['id'] == None: raise Exception()
        self.id = _json_["id"]
        if _json_['distinct_bonus_infos'] == None: raise Exception()
        self.distinct_bonus_infos = []
        for _ele in _json_["distinct_bonus_infos"]: _e = role_DistinctBonusInfos(_ele); self.distinct_bonus_infos.append(_e)





class role_DistinctBonusInfos :

    def __init__(self, _json_):
        if _json_['effective_level'] == None: raise Exception()
        self.effective_level = _json_["effective_level"]
        if _json_['bonus_info'] == None: raise Exception()
        self.bonus_info = []
        for _ele in _json_["bonus_info"]: _e = role_BonusInfo(_ele); self.bonus_info.append(_e)





class role_BonusInfo :

    def __init__(self, _json_):
        if _json_['type'] == None: raise Exception()
        self.type = _json_["type"]
        if _json_['coefficient'] == None: raise Exception()
        self.coefficient = _json_["coefficient"]




class ai_TbBlackboard:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = ai_Blackboard(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.name] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class ai_TbBehaviorTree:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = ai_BehaviorTree(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class blueprint_TbClazz:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = blueprint_Clazz.fromJson(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.name] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class bonus_TbDrop:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = bonus_DropInfo(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class common_TbGlobalConfig:

    def __init__(self, _json_):
        if (len(_json_) != 1): raise Exception('table mode=one, but size != 1')
        self._data = common_GlobalConfig(_json_[0])

    def getData(self) : return self._data

    def bag_capacity(self) : return self._data.bag_capacity
    def bag_capacity_special(self) : return self._data.bag_capacity_special
    def bag_temp_expendable_capacity(self) : return self._data.bag_temp_expendable_capacity
    def bag_temp_tool_capacity(self) : return self._data.bag_temp_tool_capacity
    def bag_init_capacity(self) : return self._data.bag_init_capacity
    def quick_bag_capacity(self) : return self._data.quick_bag_capacity
    def cloth_bag_capacity(self) : return self._data.cloth_bag_capacity
    def cloth_bag_init_capacity(self) : return self._data.cloth_bag_init_capacity
    def cloth_bag_capacity_special(self) : return self._data.cloth_bag_capacity_special
    def bag_init_items_drop_id(self) : return self._data.bag_init_items_drop_id
    def mail_box_capacity(self) : return self._data.mail_box_capacity
    def damage_param_c(self) : return self._data.damage_param_c
    def damage_param_e(self) : return self._data.damage_param_e
    def damage_param_f(self) : return self._data.damage_param_f
    def damage_param_d(self) : return self._data.damage_param_d
    def role_speed(self) : return self._data.role_speed
    def monster_speed(self) : return self._data.monster_speed
    def init_energy(self) : return self._data.init_energy
    def init_viality(self) : return self._data.init_viality
    def max_viality(self) : return self._data.max_viality
    def per_viality_recovery_time(self) : return self._data.per_viality_recovery_time




class common_TbDummy:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = common_Dummy(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class error_TbErrorInfo:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = error_ErrorInfo(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.code] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class error_TbCodeInfo:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = error_CodeInfo(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.code] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class item_TbItem:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = item_Item(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class item_TbItemFunc:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = item_ItemFunction(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.minor_type] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class item_TbItemExtra:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = item_ItemExtra.fromJson(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class mail_TbSystemMail:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = mail_SystemMail(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class mail_TbGlobalMail:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = mail_GlobalMail(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class role_TbRoleLevelExpAttr:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = role_LevelExpAttr(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.level] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class role_TbRoleLevelBonusCoefficient:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = role_LevelBonus(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class Tables:
    #def TbBlackboard : return self._TbBlackboard
    #def TbBehaviorTree : return self._TbBehaviorTree
    #def TbClazz : return self._TbClazz
    #def TbDrop : return self._TbDrop
    #def TbGlobalConfig : return self._TbGlobalConfig
    #def TbDummy : return self._TbDummy
    #def TbErrorInfo : return self._TbErrorInfo
    #def TbCodeInfo : return self._TbCodeInfo
    #def TbItem : return self._TbItem
    #def TbItemFunc : return self._TbItemFunc
    #def TbItemExtra : return self._TbItemExtra
    #def TbSystemMail : return self._TbSystemMail
    #def TbGlobalMail : return self._TbGlobalMail
    #def TbRoleLevelExpAttr : return self._TbRoleLevelExpAttr
    #def TbRoleLevelBonusCoefficient : return self._TbRoleLevelBonusCoefficient

    def __init__(self, loader):
        self.TbBlackboard = ai_TbBlackboard(loader('ai.TbBlackboard.json')); 
        self.TbBehaviorTree = ai_TbBehaviorTree(loader('ai.TbBehaviorTree.json')); 
        self.TbClazz = blueprint_TbClazz(loader('blueprint.TbClazz.json')); 
        self.TbDrop = bonus_TbDrop(loader('bonus.TbDrop.json')); 
        self.TbGlobalConfig = common_TbGlobalConfig(loader('common.TbGlobalConfig.json')); 
        self.TbDummy = common_TbDummy(loader('common.TbDummy.json')); 
        self.TbErrorInfo = error_TbErrorInfo(loader('error.TbErrorInfo.json')); 
        self.TbCodeInfo = error_TbCodeInfo(loader('error.TbCodeInfo.json')); 
        self.TbItem = item_TbItem(loader('item.TbItem.json')); 
        self.TbItemFunc = item_TbItemFunc(loader('item.TbItemFunc.json')); 
        self.TbItemExtra = item_TbItemExtra(loader('item.TbItemExtra.json')); 
        self.TbSystemMail = mail_TbSystemMail(loader('mail.TbSystemMail.json')); 
        self.TbGlobalMail = mail_TbGlobalMail(loader('mail.TbGlobalMail.json')); 
        self.TbRoleLevelExpAttr = role_TbRoleLevelExpAttr(loader('role.TbRoleLevelExpAttr.json')); 
        self.TbRoleLevelBonusCoefficient = role_TbRoleLevelBonusCoefficient(loader('role.TbRoleLevelBonusCoefficient.json')); 

