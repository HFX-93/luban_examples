
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Bright.Serialization;
using System.Collections.Generic;
using System.Text.Json;



namespace cfg.condition
{
   
public abstract partial class RoleCondition :  condition.Condition 
{
    public RoleCondition(JsonElement _buf)  : base(_buf) 
    {
    }

    public RoleCondition()  : base() 
    {
    }

    public static RoleCondition DeserializeRoleCondition(JsonElement _buf)
    {
    
        if (_buf.ValueKind == JsonValueKind.Null) { return null; }
        switch (_buf.GetProperty("__type__").GetString())
        {
            case "MultiRoleCondition": return new condition.MultiRoleCondition(_buf);
            case "GenderLimit": return new condition.GenderLimit(_buf);
            case "MinLevel": return new condition.MinLevel(_buf);
            case "MaxLevel": return new condition.MaxLevel(_buf);
            case "MinMaxLevel": return new condition.MinMaxLevel(_buf);
            case "ClothesPropertyScoreGreaterThan": return new condition.ClothesPropertyScoreGreaterThan(_buf);
            case "ContainsItem": return new condition.ContainsItem(_buf);
            default: throw new SerializationException();
        }
    
    }




    public override void Resolve(Dictionary<string, object> _tables)
    {
base.Resolve(_tables);
        OnResolveFinish(_tables);
    }

    partial void OnResolveFinish(Dictionary<string, object> _tables);

    public override string ToString()
    {
        return "{ "
        + "}";
    }
    }
}

