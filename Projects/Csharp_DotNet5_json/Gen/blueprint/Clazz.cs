
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Bright.Serialization;
using System.Collections.Generic;
using System.Text.Json;



namespace cfg.blueprint
{
   
public abstract partial class Clazz :  Bright.Config.BeanBase 
{
    public Clazz(JsonElement _buf) 
    {
        Name = _buf.GetProperty("name").GetString();
        Desc = _buf.GetProperty("desc").GetString();
        { var _json = _buf.GetProperty("parents"); Parents = new System.Collections.Generic.List<blueprint.Clazz>(_json.GetArrayLength()); foreach(JsonElement __e in _json.EnumerateArray()) { blueprint.Clazz __v;  __v =  blueprint.Clazz.DeserializeClazz(__e);  Parents.Add(__v); }   }
        { var _json = _buf.GetProperty("methods"); Methods = new System.Collections.Generic.List<blueprint.Method>(_json.GetArrayLength()); foreach(JsonElement __e in _json.EnumerateArray()) { blueprint.Method __v;  __v =  blueprint.Method.DeserializeMethod(__e);  Methods.Add(__v); }   }
    }

    public Clazz(string name, string desc, System.Collections.Generic.List<blueprint.Clazz> parents, System.Collections.Generic.List<blueprint.Method> methods ) 
    {
        this.Name = name;
        this.Desc = desc;
        this.Parents = parents;
        this.Methods = methods;
    }

    public static Clazz DeserializeClazz(JsonElement _buf)
    {
    
        if (_buf.ValueKind == JsonValueKind.Null) { return null; }
        switch (_buf.GetProperty("__type__").GetString())
        {
            case "Interface": return new blueprint.Interface(_buf);
            case "NormalClazz": return new blueprint.NormalClazz(_buf);
            case "EnumClazz": return new blueprint.EnumClazz(_buf);
            default: throw new SerializationException();
        }
    
    }

    public readonly string Name;
    public readonly string Desc;
    public readonly System.Collections.Generic.List<blueprint.Clazz> Parents;
    public readonly System.Collections.Generic.List<blueprint.Method> Methods;



    public virtual void Resolve(Dictionary<string, object> _tables)
    {

        foreach(var _e in Parents) { _e?.Resolve(_tables); }
        foreach(var _e in Methods) { _e?.Resolve(_tables); }
        OnResolveFinish(_tables);
    }

    partial void OnResolveFinish(Dictionary<string, object> _tables);

    public override string ToString()
    {
        return "{ "
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "Parents:" + Bright.Common.StringUtil.CollectionToString(Parents) + ","
        + "Methods:" + Bright.Common.StringUtil.CollectionToString(Methods) + ","
        + "}";
    }
    }
}

