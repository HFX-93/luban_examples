
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
package cfg

import (
    "bright/serialization"
)



type Test_TestSize struct {
    Id int32
    X1 []int32
    X2 []int32
    X3 []int32
    X4 map[int32]int32
}

func (Test_TestSize) GetTypeId() int {
    return 340006319
}

func NewTest_TestSize(_buf *serialization.ByteBuf) (_v *Test_TestSize, err error) {
    _v = &Test_TestSize{}
    { if _v.Id, err = _buf.ReadInt(); err != nil { return } }
     {
                _v.X1 = make([]int32, 0)
                var _n_ int
                if _n_, err = _buf.ReadSize(); err != nil {return}
                for i := 0 ; i < _n_ ; i++ {
                    var _e_ int32
                    { if _e_, err = _buf.ReadInt(); err != nil { return } }
                    _v.X1 = append(_v.X1, _e_)
                }
            }

     {
                _v.X2 = make([]int32, 0)
                var _n_ int
                if _n_, err = _buf.ReadSize(); err != nil {return}
                for i := 0 ; i < _n_ ; i++ {
                    var _e_ int32
                    { if _e_, err = _buf.ReadInt(); err != nil { return } }
                    _v.X2 = append(_v.X2, _e_)
                }
            }

     {
                _v.X3 = make([]int32, 0)
                var _n_ int
                if _n_, err = _buf.ReadSize(); err != nil {return}
                for i := 0 ; i < _n_ ; i++ {
                    var _e_ int32
                    { if _e_, err = _buf.ReadInt(); err != nil { return } }
                    _v.X3 = append(_v.X3, _e_)
                }
            }

    {
                _v.X4 = make(map[int32]int32)
                var _n_ int
                if _n_, err = _buf.ReadSize(); err != nil {return}
                for i := 0 ; i < _n_ ; i++ {
                    var _key_ int32
                    { if _key_, err = _buf.ReadInt(); err != nil { return } }
                    var _value_ int32
                    { if _value_, err = _buf.ReadInt(); err != nil { return } }
                    _v.X4[_key_] = _value_
                }
                }
    return
}
