
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
package cfg

import "bright/serialization"



type Test_MultiRowRecord struct {
    Id int32
    Name string
    OneRows []*Test_MultiRowType1
    MultiRows1 []*Test_MultiRowType1
    MultiRows2 []*Test_MultiRowType1
    MultiRows3 []*Test_MultiRowType2
    MultiRows4 map[int32]*Test_MultiRowType2
}

func (Test_MultiRowRecord) GetTypeId() int {
    return -501249394
}

func NewTest_MultiRowRecord(_buf *serialization.ByteBuf) (_v *Test_MultiRowRecord, err error) {
    _v = &Test_MultiRowRecord{}
    if _v.Id, err = _buf.ReadInt(); err != nil  { return } 
    if _v.Name, err = _buf.ReadString(); err != nil  { return } 
    if _v.OneRows, err = func (_buf2 *serialization.ByteBuf) (_v2 []*Test_MultiRowType1, err2 error) {
                _v2 = make([]*Test_MultiRowType1, 0)
                var n int
                if n, err2 = _buf2.ReadSize(); err2 != nil {return}
                for i := 0 ; i < n ; i++ {
                    var v3 *Test_MultiRowType1
                    if v3, err2 = NewTest_MultiRowType1 (_buf2); err2 != nil {return}
                    _v2 = append(_v2, v3)
                }
                return
                }(_buf); err != nil  { return } 
    if _v.MultiRows1, err = func (_buf2 *serialization.ByteBuf) (_v2 []*Test_MultiRowType1, err2 error) {
                _v2 = make([]*Test_MultiRowType1, 0)
                var n int
                if n, err2 = _buf2.ReadSize(); err2 != nil {return}
                for i := 0 ; i < n ; i++ {
                    var v3 *Test_MultiRowType1
                    if v3, err2 = NewTest_MultiRowType1 (_buf2); err2 != nil {return}
                    _v2 = append(_v2, v3)
                }
                return
                }(_buf); err != nil  { return } 
    if _v.MultiRows2, err = func (_buf2 *serialization.ByteBuf) (_v2 []*Test_MultiRowType1, err2 error) {
                _v2 = make([]*Test_MultiRowType1, 0)
                var n int
                if n, err2 = _buf2.ReadSize(); err2 != nil {return}
                for i := 0 ; i < n ; i++ {
                    var v3 *Test_MultiRowType1
                    if v3, err2 = NewTest_MultiRowType1 (_buf2); err2 != nil {return}
                    _v2 = append(_v2, v3)
                }
                return
                }(_buf); err != nil  { return } 
    if _v.MultiRows3, err = func (_buf2 *serialization.ByteBuf) (_v2 []*Test_MultiRowType2, err2 error) {
                _v2 = make([]*Test_MultiRowType2, 0)
                var n int
                if n, err2 = _buf2.ReadSize(); err2 != nil {return}
                for i := 0 ; i < n ; i++ {
                    var v3 *Test_MultiRowType2
                    if v3, err2 = NewTest_MultiRowType2 (_buf2); err2 != nil {return}
                    _v2 = append(_v2, v3)
                }
                return
                }(_buf); err != nil  { return } 
    if _v.MultiRows4, err = func (_buf2 *serialization.ByteBuf) (_v2 map[int32]*Test_MultiRowType2, err2 error) {
                _v2 = make(map[int32]*Test_MultiRowType2)
                var n int
                if n, err2 = _buf2.ReadSize(); err2 != nil {return}
                for i := 0 ; i < n ; i++ {
                    var _key int32
                    if _key, err2 = _buf2.ReadInt(); err2 != nil {return}
                    var _value *Test_MultiRowType2
                    if _value, err2 = NewTest_MultiRowType2 (_buf2); err2 != nil {return}
                    _v2[_key] = _value
                }
                return
                }(_buf); err != nil  { return } 
    return
}

