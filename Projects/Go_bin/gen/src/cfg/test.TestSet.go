
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
package cfg

import (
    "bright/serialization"
)



type Test_TestSet struct {
    Id int32
    X1 []int32
    X2 []int64
    X3 []string
    X4 []int32
}

func (Test_TestSet) GetTypeId() int {
    return -543221516
}

func NewTest_TestSet(_buf *serialization.ByteBuf) (_v *Test_TestSet, err error) {
    _v = &Test_TestSet{}
    { if _v.Id, err = _buf.ReadInt(); err != nil { return } }
     {
                _v.X1 = make([]int32, 0)
                var _n_ int
                if _n_, err = _buf.ReadSize(); err != nil {return}
                for i := 0 ; i < _n_ ; i++ {
                    var _e_ int32
                    { if _e_, err = _buf.ReadInt(); err != nil { return } }
                    _v.X1 = append(_v.X1, _e_)
                }
            }

     {
                _v.X2 = make([]int64, 0)
                var _n_ int
                if _n_, err = _buf.ReadSize(); err != nil {return}
                for i := 0 ; i < _n_ ; i++ {
                    var _e_ int64
                    { if _e_, err = _buf.ReadLong(); err != nil { return } }
                    _v.X2 = append(_v.X2, _e_)
                }
            }

     {
                _v.X3 = make([]string, 0)
                var _n_ int
                if _n_, err = _buf.ReadSize(); err != nil {return}
                for i := 0 ; i < _n_ ; i++ {
                    var _e_ string
                    { if _e_, err = _buf.ReadString(); err != nil { return } }
                    _v.X3 = append(_v.X3, _e_)
                }
            }

     {
                _v.X4 = make([]int32, 0)
                var _n_ int
                if _n_, err = _buf.ReadSize(); err != nil {return}
                for i := 0 ; i < _n_ ; i++ {
                    var _e_ int32
                    { if _e_, err = _buf.ReadInt(); err != nil { return } }
                    _v.X4 = append(_v.X4, _e_)
                }
            }

    return
}
