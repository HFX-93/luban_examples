
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

import {Bright} from 'csharp'

export namespace cfg {


export class Vector2 {
        x: number
        y: number
        constructor(x: number, y: number) {
            this.x = x
            this.y = y
        }

        static from(_buf_: Bright.Serialization.ByteBuf): Vector2 {
            let x = _buf_.ReadFloat()
            let y = _buf_.ReadFloat()
            return new Vector2(x, y)
        }
    }


    export class Vector3 {
        x: number
        y: number
        z: number
        constructor(x: number, y: number, z: number) {
            this.x = x
            this.y = y
            this.z = z
        }

        static from(_buf_: Bright.Serialization.ByteBuf): Vector3 {
            let x = _buf_.ReadFloat()
            let y = _buf_.ReadFloat()
            let z = _buf_.ReadFloat()
            return new Vector3(x, y, z)
        }
    }

    export class Vector4 {
        x: number
        y: number
        z: number
        w: number
        constructor(x: number, y: number, z: number, w: number) {
            this.x = x
            this.y = y
            this.z = z
            this.w = w
        }

        static from(_buf_: Bright.Serialization.ByteBuf): Vector4 {
            let x = _buf_.ReadFloat()
            let y = _buf_.ReadFloat()
            let z = _buf_.ReadFloat()
            let w = _buf_.ReadFloat()
            return new Vector4(x, y, z, w)
        }
    }



export namespace ai {

export enum EExecutor {
    CLIENT = 0,
    SERVER = 1,
}
}


export namespace ai {

export enum EKeyType {
    BOOL = 1,
    INT = 2,
    FLOAT = 3,
    STRING = 4,
    VECTOR = 5,
    ROTATOR = 6,
    NAME = 7,
    CLASS = 8,
    ENUM = 9,
    OBJECT = 10,
}
}


export namespace ai {

export enum EFlowAbortMode {
    NONE = 0,
    LOWER_PRIORITY = 1,
    SELF = 2,
    BOTH = 3,
}
}


export namespace ai {

export enum EFinishMode {
    IMMEDIATE = 0,
    DELAYED = 1,
}
}


export namespace ai {

export enum ENotifyObserverMode {
    ON_VALUE_CHANGE = 0,
    ON_RESULT_CHANGE = 1,
}
}


export namespace ai {

export enum EOperator {
    IS_EQUAL_TO = 0,
    IS_NOT_EQUAL_TO = 1,
    IS_LESS_THAN = 2,
    IS_LESS_THAN_OR_EQUAL_TO = 3,
    IS_GREAT_THAN = 4,
    IS_GREAT_THAN_OR_EQUAL_TO = 5,
    CONTAINS = 6,
    NOT_CONTAINS = 7,
}
}


export namespace common {

export enum EBoolOperator {
    AND = 0,
    OR = 1,
}
}


export namespace error {

export enum EOperation {
    LOGOUT = 0,
    RESTART = 1,
}
}


export namespace error {

export enum EErrorCode {
    OK = 0,
    SERVER_NOT_EXISTS = 1,
    HAS_BIND_SERVER = 2,
    AUTH_FAIL = 3,
    NOT_BIND_SERVER = 4,
    SERVER_ACCESS_FAIL = 5,
    EXAMPLE_FLASH = 6,
    EXAMPLE_MSGBOX = 7,
    EXAMPLE_DLG_OK = 8,
    EXAMPLE_DLG_OK_CANCEL = 9,
    ROLE_CREATE_NAME_INVALID_CHAR = 100,
    ROLE_CREATE_NAME_EMPTY = 101,
    ROLE_CREATE_NAME_EXCEED_MAX_LENGTH = 102,
    ROLE_CREATE_ROLE_LIST_FULL = 103,
    ROLE_CREATE_INVALID_PROFESSION = 104,
    ROLE_CREATE_INVALID_GENDER = 105,
    ROLE_NOT_OWNED_BY_USER = 106,
    ROLE_LEVEL_NOT_ARRIVE = 107,
    PARAM_ILLEGAL = 200,
    TEMP_BAG_NOT_EMPTY = 201,
    ITEM_CAN_NOT_USE = 202,
    CURRENCY_NOT_ENOUGH = 203,
    BAG_IS_FULL = 204,
    ITEM_NOT_ENOUGH = 205,
    ITEM_IN_BAG = 206,
    GENDER_NOT_MATCH = 300,
    LEVEL_TOO_LOW = 301,
    LEVEL_TOO_HIGH = 302,
    EXCEED_LIMIT = 303,
    OVER_TIME = 304,
    SERVER_ERROR = 305,
    SKILL_NOT_IN_LIST = 400,
    SKILL_NOT_COOLDOWN = 401,
    SKILL_TARGET_NOT_EXIST = 402,
    SKILL_ANOTHER_CASTING = 403,
    SKILL_OUT_OF_DISTANCE = 404,
    SKILL_TARGET_CAMP_NOT_MATCH = 405,
    SKILL_INVALID_DIRECTION = 406,
    SKILL_NOT_IN_SELECT_SHAPE = 407,
    SKILL_ENERGY_NOT_ENOUGH = 408,
    DIALOG_NODE_NOT_CHOOSEN = 500,
    DIALOG_NOT_FINISH = 501,
    DIALOG_HAS_FINISH = 502,
    QUEST_STAGE_NOT_FINISHED = 503,
    QUEST_NOT_DOING = 504,
    QUEST_STAGE_NOT_DOING = 505,
    QUEST_HAS_ACCEPTED = 506,
    MAP_OBJECT_NOT_EXIST = 600,
    INTERACTION_OBJECT_NOT_SUPPORT_OPERATION = 601,
    HAS_NOT_EQUIP = 602,
    HANDHELD_EQUIP_ID_NOT_MATCH = 603,
    NOT_AVAILABLE_SUIT_ID = 604,
    NO_INTERACTION_COMPONENT = 605,
    HAS_INTERACTED = 606,
    VIALITY_NOT_ENOUGH = 607,
    PLAYER_SESSION_NOT_EXIST = 608,
    PLAYER_SESSION_WORLD_PLAYER_NOT_INIT = 609,
    MAP_NOT_EXIST = 610,
    MAIL_TYPE_ERROR = 700,
    MAIL_NOT_EXITST = 701,
    MAIL_HAVE_DELETED = 702,
    MAIL_AWARD_HAVE_RECEIVED = 703,
    MAIL_OPERATE_TYPE_ERROR = 704,
    MAIL_CONDITION_NOT_MEET = 705,
    MAIL_STATE_ERROR = 706,
    MAIL_NO_AWARD = 707,
    MAIL_BOX_IS_FULL = 708,
    PROP_SCORE_NOT_BIGGER_THAN = 800,
    NOT_WEAR_CLOTHES = 801,
    NOT_WEAR_SUIT = 802,
    SUIT_NOT_UNLOCK = 900,
    SUIT_COMPONENT_NOT_UNLOCK = 901,
    SUIT_STATE_ERROR = 902,
    SUIT_COMPONENT_STATE_ERROR = 903,
    SUIT_COMPONENT_NO_NEED_LEARN = 904,
    STORE_NOT_ENABLED = 1000,
    SHELF_NOT_ENABLED = 1001,
    GOODS_NOT_ENABLED = 1002,
    GOODS_NOT_IN_CUR_REFRESH = 1003,
    RETRY = 1100,
    NOT_COOLDOWN = 1101,
    SELFIE_UNLOCK = 1200,
    SELFIE_ALREADY_UNLOCK = 1201,
    SELFIE_LACK_STARTS = 1202,
    SELFIE_HAD_REWARD = 1203,
}
}


export namespace item {

export enum EItemQuality {
    WHITE = 0,
    GREEN = 1,
    BLUE = 2,
    PURPLE = 3,
    GOLDEN = 4,
}
}


export namespace item {

export enum ECurrencyType {
    DIAMOND = 1,
    GOLD = 2,
    SILVER = 3,
    EXP = 4,
    POWER_POINT = 5,
}
}


export namespace item {

export enum EMajorType {
    CURRENCY = 1,
    CLOTH = 2,
    QUEST = 3,
    CONSUMABLES = 4,
    TREASURE_BOX = 5,
    ACHIEVEMENT_AND_TITLE = 6,
    HEAD_FRAME = 7,
    VOICE = 8,
    ACTION = 9,
    EXPANSION = 10,
    MATERIAL = 11,
}
}


export namespace item {

export enum EMinorType {
    DIAMOND = 101,
    GOLD = 102,
    SILVER = 103,
    EXP = 104,
    POWER_POINT = 105,
    HAIR_STYLE = 210,
    COAT = 220,
    UPPER_JACKET = 230,
    TROUSERS = 241,
    SKIRT = 242,
    SOCKS = 250,
    SHOES = 260,
    HAIR_ACCESSORY = 271,
    HAT = 272,
    EARRING = 273,
    NECKLACE = 274,
    BRACELET = 275,
    HAIR_CLASP = 276,
    GLOVE = 277,
    HANDHELD_OBJECT = 278,
    SPECIAL = 279,
    BASE_COSMETIC = 281,
    EYEBROW_COSMETIC = 282,
    EYELASH = 283,
    COSMETIC_CONTACT_LENSES = 284,
    LIP_COSMETIC = 285,
    SKIN_COLOR = 286,
    ONE_PIECE_DRESS = 290,
    SWITCH_CLOTHES_SCENE = 291,
    QUEST = 301,
    CAST = 401,
    SWORD = 421,
    BOW_ARROW = 422,
    WANDS = 423,
    SPECIAL_TOOL = 424,
    FOOD = 403,
    TREASURE_BOX = 501,
    KEY = 502,
    MULTI_CHOOSE_TREASURE_BOX = 503,
    ACHIEVEMENT = 601,
    TITLE = 602,
    AVATAR_FRAME = 701,
    VOICE = 801,
    IDLE_POSE = 901,
    PHOTO_POSE = 902,
    BAG = 1001,
    FRIEND_CAPACITY = 1002,
    CONSTRUCTION_MATERIAL = 1101,
    DESIGN_DRAWING = 1102,
}
}


export namespace item {

export enum EClothersStarQualityType {
    ONE = 1,
    TWO = 2,
    THREE = 3,
    FOUR = 4,
    FIVE = 5,
    SIX = 6,
    SEVEN = 7,
    EIGHT = 8,
    NINE = 9,
    TEN = 10,
}
}


export namespace item {

export enum EClothersTag {
    FANG_SHAI = 1,
    WU_ZHE = 2,
}
}


export namespace item {

export enum EUseType {
    MANUAL = 0,
    AUTO = 1,
}
}


export namespace item {

export enum EClothesHidePartType {
    CHEST = 0,
    HEAD = 1,
    SPINE_UPPER = 2,
    SPINE_LOWER = 3,
    HIP = 4,
    LEG_UPPER = 5,
    LEG_MIDDLE = 6,
    LEG_LOWER = 7,
}
}


export namespace item {

export enum EClothesPropertyType {
    JIAN_YUE = 1,
    HUA_LI = 2,
    KE_AI = 3,
    CHENG_SHU = 4,
    HUO_PO = 5,
    YOU_YA = 6,
    QING_CHUN = 7,
    XING_GAN = 8,
    QING_LIANG = 9,
    BAO_NUAN = 10,
}
}


export namespace item {

export enum EItemFunctionType {
    REPLACE_HANDHELD = 0,
    USE_DESIGN_DRAWING = 1,
}
}


export namespace limit {

export enum ENamespace {
    ITEM_DAILY_OBTAIN = 1,
    TREASURE_DAILY_USE = 2,
    STORE_GOODS_LIMIT_BUY = 3,
}
}


export namespace mail {

export enum EMailType {
    GLOBAL = 0,
    SYSTEM = 1,
}
}


export namespace role {

export enum EGenderType {
    MALE = 1,
    FEMALE = 2,
}
}


export namespace role {

export enum EProfession {
    TEST_PROFESSION = 1,
}
}


export namespace test {

export enum DemoEnum {
    A = 1,
    B = 2,
    C = 4,
    D = 5,
}
}


export namespace test {

export enum ETestUeType {
    WHITE = 0,
    BLACK = 1,
}
}


export namespace test {

export enum ETestEmptyEnum {
}
}


export namespace test {

export enum ETestEmptyEnum2 {
    SMALL_THAN_256 = 255,
    X_256 = 256,
    X_257 = 257,
}
}


export namespace role {

export class Consts {
    static MAX_NAME_LENGTH = 20;
    static MAX_USER_ROLE_NUM = 10;
}
}



export namespace test {

export class DemoConst {
    static x1 = 0;
    static x2 = 3242;
    static x3 = 444.3;
    static x4 = 55.3;
}
}






export namespace ai {

export  class Blackboard  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.name = _buf_.ReadString();
        this.desc = _buf_.ReadString();
        this.parentName = _buf_.ReadString();
        { this.keys = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :ai.BlackboardKey;_e = new ai.BlackboardKey(_buf_); this.keys.push(_e) } }
    }

    readonly name: string
    readonly desc: string
    readonly parentName: string
    parentName_Ref : ai.Blackboard
    readonly keys: ai.BlackboardKey[]

    resolve(_tables: Map<string, any>) {
        this.parentName_Ref = (_tables.get('ai.TbBlackboard') as ai.TbBlackboard).get(this.parentName)
        for(let _e of this.keys) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





export namespace ai {

export  class BlackboardKey  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.name = _buf_.ReadString();
        this.desc = _buf_.ReadString();
        this.isStatic = _buf_.ReadBool();
        this.type = _buf_.ReadInt();
        this.typeClassName = _buf_.ReadString();
    }

    readonly name: string
    readonly desc: string
    readonly isStatic: boolean
    readonly type: ai.EKeyType
    readonly typeClassName: string

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace ai {

export  class BehaviorTree  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.name = _buf_.ReadString();
        this.desc = _buf_.ReadString();
        this.blackboardId = _buf_.ReadString();
        this.root = ai.ComposeNode.constructorFrom(_buf_)
    }

    readonly id: number
    readonly name: string
    readonly desc: string
    readonly blackboardId: string
    blackboardId_Ref : ai.Blackboard
    readonly root: ai.ComposeNode

    resolve(_tables: Map<string, any>) {
        this.blackboardId_Ref = (_tables.get('ai.TbBlackboard') as ai.TbBlackboard).get(this.blackboardId)
        if (this.root != null) { this.root.resolve(_tables);}
    }
}

}





export namespace ai {

export  abstract  class Node  {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): Node {
        switch (_buf_.ReadInt()) {
            case 1812449155: return new ai.UeSetDefaultFocus(_buf_)
            case 990693812: return new ai.ExecuteTimeStatistic(_buf_)
            case 1601247918: return new ai.ChooseTarget(_buf_)
            case 1195270745: return new ai.KeepFaceTarget(_buf_)
            case -999247644: return new ai.GetOwnerPlayer(_buf_)
            case -61887372: return new ai.UpdateDailyBehaviorProps(_buf_)
            case -513308166: return new ai.UeLoop(_buf_)
            case -951439423: return new ai.UeCooldown(_buf_)
            case 338469720: return new ai.UeTimeLimit(_buf_)
            case -315297507: return new ai.UeBlackboard(_buf_)
            case 195054574: return new ai.UeForceSuccess(_buf_)
            case 1255972344: return new ai.IsAtLocation(_buf_)
            case -1207170283: return new ai.DistanceLessThan(_buf_)
            case -1789006105: return new ai.Sequence(_buf_)
            case -1946981627: return new ai.Selector(_buf_)
            case -1952582529: return new ai.SimpleParallel(_buf_)
            case -512994101: return new ai.UeWait(_buf_)
            case 1215378271: return new ai.UeWaitBlackboardTime(_buf_)
            case 514987779: return new ai.MoveToTarget(_buf_)
            case -918812268: return new ai.ChooseSkill(_buf_)
            case -2140042998: return new ai.MoveToRandomLocation(_buf_)
            case -969953113: return new ai.MoveToLocation(_buf_)
            case 1357409728: return new ai.DebugPrint(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.nodeName = _buf_.ReadString();
    }

    readonly id: number
    readonly nodeName: string

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace ai {

export  abstract  class Service  extends ai.Node {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): Service {
        switch (_buf_.ReadInt()) {
            case 1812449155: return new ai.UeSetDefaultFocus(_buf_)
            case 990693812: return new ai.ExecuteTimeStatistic(_buf_)
            case 1601247918: return new ai.ChooseTarget(_buf_)
            case 1195270745: return new ai.KeepFaceTarget(_buf_)
            case -999247644: return new ai.GetOwnerPlayer(_buf_)
            case -61887372: return new ai.UpdateDailyBehaviorProps(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
    }


    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class UeSetDefaultFocus  extends ai.Service {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.keyboardKey = _buf_.ReadString();
    }

    readonly keyboardKey: string

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class ExecuteTimeStatistic  extends ai.Service {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
    }


    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class ChooseTarget  extends ai.Service {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.resultTargetKey = _buf_.ReadString();
    }

    readonly resultTargetKey: string

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class KeepFaceTarget  extends ai.Service {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.targetActorKey = _buf_.ReadString();
    }

    readonly targetActorKey: string

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class GetOwnerPlayer  extends ai.Service {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.playerActorKey = _buf_.ReadString();
    }

    readonly playerActorKey: string

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class UpdateDailyBehaviorProps  extends ai.Service {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.satietyKey = _buf_.ReadString();
        this.energyKey = _buf_.ReadString();
        this.moodKey = _buf_.ReadString();
        this.satietyLowerThresholdKey = _buf_.ReadString();
        this.satietyUpperThresholdKey = _buf_.ReadString();
        this.energyLowerThresholdKey = _buf_.ReadString();
        this.energyUpperThresholdKey = _buf_.ReadString();
        this.moodLowerThresholdKey = _buf_.ReadString();
        this.moodUpperThresholdKey = _buf_.ReadString();
    }

    readonly satietyKey: string
    readonly energyKey: string
    readonly moodKey: string
    readonly satietyLowerThresholdKey: string
    readonly satietyUpperThresholdKey: string
    readonly energyLowerThresholdKey: string
    readonly energyUpperThresholdKey: string
    readonly moodLowerThresholdKey: string
    readonly moodUpperThresholdKey: string

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  abstract  class Decorator  extends ai.Node {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): Decorator {
        switch (_buf_.ReadInt()) {
            case -513308166: return new ai.UeLoop(_buf_)
            case -951439423: return new ai.UeCooldown(_buf_)
            case 338469720: return new ai.UeTimeLimit(_buf_)
            case -315297507: return new ai.UeBlackboard(_buf_)
            case 195054574: return new ai.UeForceSuccess(_buf_)
            case 1255972344: return new ai.IsAtLocation(_buf_)
            case -1207170283: return new ai.DistanceLessThan(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.flowAbortMode = _buf_.ReadInt();
    }

    readonly flowAbortMode: ai.EFlowAbortMode

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class UeLoop  extends ai.Decorator {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.numLoops = _buf_.ReadInt();
        this.infiniteLoop = _buf_.ReadBool();
        this.infiniteLoopTimeoutTime = _buf_.ReadFloat();
    }

    readonly numLoops: number
    readonly infiniteLoop: boolean
    readonly infiniteLoopTimeoutTime: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class UeCooldown  extends ai.Decorator {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.cooldownTime = _buf_.ReadFloat();
    }

    readonly cooldownTime: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class UeTimeLimit  extends ai.Decorator {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.limitTime = _buf_.ReadFloat();
    }

    readonly limitTime: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class UeBlackboard  extends ai.Decorator {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.notifyObserver = _buf_.ReadInt();
        this.blackboardKey = _buf_.ReadString();
        this.keyQuery = ai.KeyQueryOperator.constructorFrom(_buf_)
    }

    readonly notifyObserver: ai.ENotifyObserverMode
    readonly blackboardKey: string
    readonly keyQuery: ai.KeyQueryOperator

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        if (this.keyQuery != null) { this.keyQuery.resolve(_tables);}
    }
}

}





export namespace ai {

export  abstract  class KeyQueryOperator  {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): KeyQueryOperator {
        switch (_buf_.ReadInt()) {
            case 1635350898: return new ai.IsSet(_buf_)
            case 790736255: return new ai.IsNotSet(_buf_)
            case -979891605: return new ai.BinaryOperator(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
    }


    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace ai {

export  class IsSet  extends ai.KeyQueryOperator {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
    }


    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class IsNotSet  extends ai.KeyQueryOperator {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
    }


    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class BinaryOperator  extends ai.KeyQueryOperator {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.oper = _buf_.ReadInt();
        this.data = ai.KeyData.constructorFrom(_buf_)
    }

    readonly oper: ai.EOperator
    readonly data: ai.KeyData

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        if (this.data != null) { this.data.resolve(_tables);}
    }
}

}





export namespace ai {

export  abstract  class KeyData  {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): KeyData {
        switch (_buf_.ReadInt()) {
            case -719747885: return new ai.FloatKeyData(_buf_)
            case -342751904: return new ai.IntKeyData(_buf_)
            case -307888654: return new ai.StringKeyData(_buf_)
            case 1517269500: return new ai.BlackboardKeyData(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
    }


    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace ai {

export  class FloatKeyData  extends ai.KeyData {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.value = _buf_.ReadFloat();
    }

    readonly value: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class IntKeyData  extends ai.KeyData {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.value = _buf_.ReadInt();
    }

    readonly value: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class StringKeyData  extends ai.KeyData {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.value = _buf_.ReadString();
    }

    readonly value: string

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class BlackboardKeyData  extends ai.KeyData {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.value = _buf_.ReadString();
    }

    readonly value: string

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class UeForceSuccess  extends ai.Decorator {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
    }


    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class IsAtLocation  extends ai.Decorator {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.acceptableRadius = _buf_.ReadFloat();
        this.keyboardKey = _buf_.ReadString();
        this.inverseCondition = _buf_.ReadBool();
    }

    readonly acceptableRadius: number
    readonly keyboardKey: string
    readonly inverseCondition: boolean

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class DistanceLessThan  extends ai.Decorator {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.actor1Key = _buf_.ReadString();
        this.actor2Key = _buf_.ReadString();
        this.distance = _buf_.ReadFloat();
        this.reverseResult = _buf_.ReadBool();
    }

    readonly actor1Key: string
    readonly actor2Key: string
    readonly distance: number
    readonly reverseResult: boolean

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  abstract  class FlowNode  extends ai.Node {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): FlowNode {
        switch (_buf_.ReadInt()) {
            case -1789006105: return new ai.Sequence(_buf_)
            case -1946981627: return new ai.Selector(_buf_)
            case -1952582529: return new ai.SimpleParallel(_buf_)
            case -512994101: return new ai.UeWait(_buf_)
            case 1215378271: return new ai.UeWaitBlackboardTime(_buf_)
            case 514987779: return new ai.MoveToTarget(_buf_)
            case -918812268: return new ai.ChooseSkill(_buf_)
            case -2140042998: return new ai.MoveToRandomLocation(_buf_)
            case -969953113: return new ai.MoveToLocation(_buf_)
            case 1357409728: return new ai.DebugPrint(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        { this.decorators = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :ai.Decorator;_e = ai.Decorator.constructorFrom(_buf_); this.decorators.push(_e) } }
        { this.services = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :ai.Service;_e = ai.Service.constructorFrom(_buf_); this.services.push(_e) } }
    }

    readonly decorators: ai.Decorator[]
    readonly services: ai.Service[]

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        for(let _e of this.decorators) { if (_e != null ) {_e.resolve(_tables);} }
        for(let _e of this.services) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





export namespace ai {

export  abstract  class ComposeNode  extends ai.FlowNode {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): ComposeNode {
        switch (_buf_.ReadInt()) {
            case -1789006105: return new ai.Sequence(_buf_)
            case -1946981627: return new ai.Selector(_buf_)
            case -1952582529: return new ai.SimpleParallel(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
    }


    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class Sequence  extends ai.ComposeNode {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        { this.children = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :ai.FlowNode;_e = ai.FlowNode.constructorFrom(_buf_); this.children.push(_e) } }
    }

    readonly children: ai.FlowNode[]

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        for(let _e of this.children) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





export namespace ai {

export  class Selector  extends ai.ComposeNode {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        { this.children = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :ai.FlowNode;_e = ai.FlowNode.constructorFrom(_buf_); this.children.push(_e) } }
    }

    readonly children: ai.FlowNode[]

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        for(let _e of this.children) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





export namespace ai {

export  class SimpleParallel  extends ai.ComposeNode {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.finishMode = _buf_.ReadInt();
        this.mainTask = ai.Task.constructorFrom(_buf_)
        this.backgroundNode = ai.FlowNode.constructorFrom(_buf_)
    }

    readonly finishMode: ai.EFinishMode
    readonly mainTask: ai.Task
    readonly backgroundNode: ai.FlowNode

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        if (this.mainTask != null) { this.mainTask.resolve(_tables);}
        if (this.backgroundNode != null) { this.backgroundNode.resolve(_tables);}
    }
}

}





export namespace ai {

export  abstract  class Task  extends ai.FlowNode {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): Task {
        switch (_buf_.ReadInt()) {
            case -512994101: return new ai.UeWait(_buf_)
            case 1215378271: return new ai.UeWaitBlackboardTime(_buf_)
            case 514987779: return new ai.MoveToTarget(_buf_)
            case -918812268: return new ai.ChooseSkill(_buf_)
            case -2140042998: return new ai.MoveToRandomLocation(_buf_)
            case -969953113: return new ai.MoveToLocation(_buf_)
            case 1357409728: return new ai.DebugPrint(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.ignoreRestartSelf = _buf_.ReadBool();
    }

    readonly ignoreRestartSelf: boolean

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class UeWait  extends ai.Task {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.waitTime = _buf_.ReadFloat();
        this.randomDeviation = _buf_.ReadFloat();
    }

    readonly waitTime: number
    readonly randomDeviation: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class UeWaitBlackboardTime  extends ai.Task {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.blackboardKey = _buf_.ReadString();
    }

    readonly blackboardKey: string

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class MoveToTarget  extends ai.Task {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.targetActorKey = _buf_.ReadString();
        this.acceptableRadius = _buf_.ReadFloat();
    }

    readonly targetActorKey: string
    readonly acceptableRadius: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class ChooseSkill  extends ai.Task {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.targetActorKey = _buf_.ReadString();
        this.resultSkillIdKey = _buf_.ReadString();
    }

    readonly targetActorKey: string
    readonly resultSkillIdKey: string

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class MoveToRandomLocation  extends ai.Task {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.originPositionKey = _buf_.ReadString();
        this.radius = _buf_.ReadFloat();
    }

    readonly originPositionKey: string
    readonly radius: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class MoveToLocation  extends ai.Task {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.location = Vector3.from(_buf_)
        this.acceptableRadius = _buf_.ReadFloat();
    }

    readonly location: Vector3
    readonly acceptableRadius: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace ai {

export  class DebugPrint  extends ai.Task {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.text = _buf_.ReadString();
    }

    readonly text: string

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace blueprint {

export  abstract  class Clazz  {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): Clazz {
        switch (_buf_.ReadInt()) {
            case 2114170750: return new blueprint.Interface(_buf_)
            case -2073576778: return new blueprint.NormalClazz(_buf_)
            case 1827364892: return new blueprint.EnumClazz(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.name = _buf_.ReadString();
        this.desc = _buf_.ReadString();
        { this.parents = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :blueprint.Clazz;_e = blueprint.Clazz.constructorFrom(_buf_); this.parents.push(_e) } }
        { this.methods = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :blueprint.Method;_e = blueprint.Method.constructorFrom(_buf_); this.methods.push(_e) } }
    }

    readonly name: string
    readonly desc: string
    readonly parents: blueprint.Clazz[]
    readonly methods: blueprint.Method[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.parents) { if (_e != null ) {_e.resolve(_tables);} }
        for(let _e of this.methods) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





export namespace blueprint {

export  abstract  class Method  {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): Method {
        switch (_buf_.ReadInt()) {
            case -392137809: return new blueprint.AbstraceMethod(_buf_)
            case 1739079015: return new blueprint.ExternalMethod(_buf_)
            case -696408103: return new blueprint.BlueprintMethod(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.name = _buf_.ReadString();
        this.desc = _buf_.ReadString();
        this.isStatic = _buf_.ReadBool();
        this.returnType = _buf_.ReadString();
        { this.parameters = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :blueprint.ParamInfo;_e = new blueprint.ParamInfo(_buf_); this.parameters.push(_e) } }
    }

    readonly name: string
    readonly desc: string
    readonly isStatic: boolean
    readonly returnType: string
    readonly parameters: blueprint.ParamInfo[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.parameters) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





export namespace blueprint {

export  class ParamInfo  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.name = _buf_.ReadString();
        this.type = _buf_.ReadString();
        this.isRef = _buf_.ReadBool();
    }

    readonly name: string
    readonly type: string
    readonly isRef: boolean

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace blueprint {

export  class AbstraceMethod  extends blueprint.Method {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
    }


    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace blueprint {

export  class ExternalMethod  extends blueprint.Method {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
    }


    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace blueprint {

export  class BlueprintMethod  extends blueprint.Method {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
    }


    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace blueprint {

export  class Interface  extends blueprint.Clazz {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
    }


    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace blueprint {

export  class NormalClazz  extends blueprint.Clazz {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.isAbstract = _buf_.ReadBool();
        { this.fields = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :blueprint.Field;_e = new blueprint.Field(_buf_); this.fields.push(_e) } }
    }

    readonly isAbstract: boolean
    readonly fields: blueprint.Field[]

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        for(let _e of this.fields) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





export namespace blueprint {

export  class Field  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.name = _buf_.ReadString();
        this.type = _buf_.ReadString();
        this.desc = _buf_.ReadString();
    }

    readonly name: string
    readonly type: string
    readonly desc: string

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace blueprint {

export  class EnumClazz  extends blueprint.Clazz {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        { this.enums = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :blueprint.EnumField;_e = new blueprint.EnumField(_buf_); this.enums.push(_e) } }
    }

    readonly enums: blueprint.EnumField[]

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        for(let _e of this.enums) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





export namespace blueprint {

export  class EnumField  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.name = _buf_.ReadString();
        this.value = _buf_.ReadInt();
    }

    readonly name: string
    readonly value: number

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace bonus {

export  class DropInfo  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.desc = _buf_.ReadString();
        { this.clientShowItems = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :bonus.ShowItemInfo;_e = new bonus.ShowItemInfo(_buf_); this.clientShowItems.push(_e) } }
        this.bonus = bonus.Bonus.constructorFrom(_buf_)
    }

    readonly id: number
    readonly desc: string
    readonly clientShowItems: bonus.ShowItemInfo[]
    readonly bonus: bonus.Bonus

    resolve(_tables: Map<string, any>) {
        for(let _e of this.clientShowItems) { if (_e != null ) {_e.resolve(_tables);} }
        if (this.bonus != null) { this.bonus.resolve(_tables);}
    }
}

}





export namespace bonus {

export  class ShowItemInfo  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.itemId = _buf_.ReadInt();
        this.itemNum = _buf_.ReadLong();
    }

    readonly itemId: number
    itemId_Ref : item.Item
    readonly itemNum: bigint

    resolve(_tables: Map<string, any>) {
        this.itemId_Ref = (_tables.get('item.TbItem') as item.TbItem).get(this.itemId)
    }
}

}





export namespace bonus {

export  abstract  class Bonus  {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): Bonus {
        switch (_buf_.ReadInt()) {
            case -1649658966: return new bonus.OneItem(_buf_)
            case 400179721: return new bonus.OneItems(_buf_)
            case 1689011106: return new bonus.Item(_buf_)
            case 819736849: return new bonus.Items(_buf_)
            case -229470727: return new bonus.CoefficientItem(_buf_)
            case -356202311: return new bonus.WeightItems(_buf_)
            case 366387866: return new bonus.ProbabilityItems(_buf_)
            case 1421907893: return new bonus.MultiBonus(_buf_)
            case 359783161: return new bonus.ProbabilityBonus(_buf_)
            case -362807016: return new bonus.WeightBonus(_buf_)
            case 1959868225: return new bonus.DropBonus(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
    }


    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace bonus {

export  class OneItem  extends bonus.Bonus {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.itemId = _buf_.ReadInt();
    }

    readonly itemId: number
    itemId_Ref : item.Item

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        this.itemId_Ref = (_tables.get('item.TbItem') as item.TbItem).get(this.itemId)
    }
}

}





export namespace bonus {

export  class OneItems  extends bonus.Bonus {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.items = new Int32Array(n); for(let i = 0 ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt();; this.items[i] = _e } }
    }

    readonly items: Int32Array

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace bonus {

export  class Item  extends bonus.Bonus {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.itemId = _buf_.ReadInt();
        this.amount = _buf_.ReadInt();
    }

    readonly itemId: number
    itemId_Ref : item.Item
    readonly amount: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        this.itemId_Ref = (_tables.get('item.TbItem') as item.TbItem).get(this.itemId)
    }
}

}





export namespace bonus {

export  class Items  extends bonus.Bonus {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.itemList = []; for(let i = 0 ; i < n ; i++) { let _e :bonus.Item;_e = new bonus.Item(_buf_); this.itemList.push(_e) } }
    }

    readonly itemList: bonus.Item[]

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        for(let _e of this.itemList) { if (_e != null) { _e.resolve(_tables); } }
    }
}

}





export namespace bonus {

export  class CoefficientItem  extends bonus.Bonus {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.bonusId = _buf_.ReadInt();
        this.bonusList = new bonus.Items(_buf_)
    }

    readonly bonusId: number
    readonly bonusList: bonus.Items

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        if (this.bonusList != null) { this.bonusList.resolve(_tables);}
    }
}

}





export namespace bonus {

export  class WeightItems  extends bonus.Bonus {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.itemList = []; for(let i = 0 ; i < n ; i++) { let _e :bonus.WeightItemInfo;_e = new bonus.WeightItemInfo(_buf_); this.itemList.push(_e) } }
    }

    readonly itemList: bonus.WeightItemInfo[]

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        for(let _e of this.itemList) { if (_e != null) { _e.resolve(_tables); } }
    }
}

}





export namespace bonus {

export  class WeightItemInfo  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.itemId = _buf_.ReadInt();
        this.num = _buf_.ReadInt();
        this.weight = _buf_.ReadInt();
    }

    readonly itemId: number
    itemId_Ref : item.Item
    readonly num: number
    readonly weight: number

    resolve(_tables: Map<string, any>) {
        this.itemId_Ref = (_tables.get('item.TbItem') as item.TbItem).get(this.itemId)
    }
}

}





export namespace bonus {

export  class ProbabilityItems  extends bonus.Bonus {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.itemList = []; for(let i = 0 ; i < n ; i++) { let _e :bonus.ProbabilityItemInfo;_e = new bonus.ProbabilityItemInfo(_buf_); this.itemList.push(_e) } }
    }

    readonly itemList: bonus.ProbabilityItemInfo[]

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        for(let _e of this.itemList) { if (_e != null) { _e.resolve(_tables); } }
    }
}

}





export namespace bonus {

export  class ProbabilityItemInfo  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.itemId = _buf_.ReadInt();
        this.num = _buf_.ReadInt();
        this.probability = _buf_.ReadFloat();
    }

    readonly itemId: number
    itemId_Ref : item.Item
    readonly num: number
    readonly probability: number

    resolve(_tables: Map<string, any>) {
        this.itemId_Ref = (_tables.get('item.TbItem') as item.TbItem).get(this.itemId)
    }
}

}





export namespace bonus {

export  class MultiBonus  extends bonus.Bonus {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.bonuses = []; for(let i = 0 ; i < n ; i++) { let _e :bonus.Bonus;_e = bonus.Bonus.constructorFrom(_buf_); this.bonuses.push(_e) } }
    }

    readonly bonuses: bonus.Bonus[]

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        for(let _e of this.bonuses) { if (_e != null) { _e.resolve(_tables); } }
    }
}

}





export namespace bonus {

export  class ProbabilityBonus  extends bonus.Bonus {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.bonuses = []; for(let i = 0 ; i < n ; i++) { let _e :bonus.ProbabilityBonusInfo;_e = new bonus.ProbabilityBonusInfo(_buf_); this.bonuses.push(_e) } }
    }

    readonly bonuses: bonus.ProbabilityBonusInfo[]

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        for(let _e of this.bonuses) { if (_e != null) { _e.resolve(_tables); } }
    }
}

}





export namespace bonus {

export  class ProbabilityBonusInfo  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.bonus = bonus.Bonus.constructorFrom(_buf_)
        this.probability = _buf_.ReadFloat();
    }

    readonly bonus: bonus.Bonus
    readonly probability: number

    resolve(_tables: Map<string, any>) {
        if (this.bonus != null) { this.bonus.resolve(_tables);}
    }
}

}





export namespace bonus {

export  class WeightBonus  extends bonus.Bonus {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.bonuses = []; for(let i = 0 ; i < n ; i++) { let _e :bonus.WeightBonusInfo;_e = new bonus.WeightBonusInfo(_buf_); this.bonuses.push(_e) } }
    }

    readonly bonuses: bonus.WeightBonusInfo[]

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        for(let _e of this.bonuses) { if (_e != null) { _e.resolve(_tables); } }
    }
}

}





export namespace bonus {

export  class WeightBonusInfo  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.bonus = bonus.Bonus.constructorFrom(_buf_)
        this.weight = _buf_.ReadInt();
    }

    readonly bonus: bonus.Bonus
    readonly weight: number

    resolve(_tables: Map<string, any>) {
        if (this.bonus != null) { this.bonus.resolve(_tables);}
    }
}

}





export namespace bonus {

export  class DropBonus  extends bonus.Bonus {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.id = _buf_.ReadInt();
    }

    readonly id: number
    id_Ref : bonus.DropInfo

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        this.id_Ref = (_tables.get('bonus.TbDrop') as bonus.TbDrop).get(this.id)
    }
}

}





export namespace common {

export  class GlobalConfig  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.bagCapacity = _buf_.ReadInt();
        this.bagCapacitySpecial = _buf_.ReadInt();
        this.bagTempExpendableCapacity = _buf_.ReadInt();
        this.bagTempToolCapacity = _buf_.ReadInt();
        this.bagInitCapacity = _buf_.ReadInt();
        this.quickBagCapacity = _buf_.ReadInt();
        this.clothBagCapacity = _buf_.ReadInt();
        this.clothBagInitCapacity = _buf_.ReadInt();
        this.clothBagCapacitySpecial = _buf_.ReadInt();
        if(_buf_.ReadBool()) { this.bagInitItemsDropId = _buf_.ReadInt(); } else { this.bagInitItemsDropId = null }
        this.mailBoxCapacity = _buf_.ReadInt();
        this.damageParamC = _buf_.ReadFloat();
        this.damageParamE = _buf_.ReadFloat();
        this.damageParamF = _buf_.ReadFloat();
        this.damageParamD = _buf_.ReadFloat();
        this.roleSpeed = _buf_.ReadFloat();
        this.monsterSpeed = _buf_.ReadFloat();
        this.initEnergy = _buf_.ReadInt();
        this.initViality = _buf_.ReadInt();
        this.maxViality = _buf_.ReadInt();
        this.perVialityRecoveryTime = _buf_.ReadInt();
    }

    readonly bagCapacity: number
    readonly bagCapacitySpecial: number
    readonly bagTempExpendableCapacity: number
    readonly bagTempToolCapacity: number
    readonly bagInitCapacity: number
    readonly quickBagCapacity: number
    readonly clothBagCapacity: number
    readonly clothBagInitCapacity: number
    readonly clothBagCapacitySpecial: number
    readonly bagInitItemsDropId?: number
    bagInitItemsDropId_Ref : bonus.DropInfo
    readonly mailBoxCapacity: number
    readonly damageParamC: number
    readonly damageParamE: number
    readonly damageParamF: number
    readonly damageParamD: number
    readonly roleSpeed: number
    readonly monsterSpeed: number
    readonly initEnergy: number
    readonly initViality: number
    readonly maxViality: number
    readonly perVialityRecoveryTime: number

    resolve(_tables: Map<string, any>) {
        this.bagInitItemsDropId_Ref = this.bagInitItemsDropId != null ? (_tables.get('bonus.TbDrop') as  bonus.TbDrop).get(this.bagInitItemsDropId) : null
    }
}

}





export namespace common {

export  class Dummy  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.limit = limit.LimitBase.constructorFrom(_buf_)
    }

    readonly id: number
    readonly limit: limit.LimitBase

    resolve(_tables: Map<string, any>) {
        if (this.limit != null) { this.limit.resolve(_tables);}
    }
}

}





export namespace limit {

export  abstract  class LimitBase  {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): LimitBase {
        switch (_buf_.ReadInt()) {
            case 303235413: return new limit.DailyLimit(_buf_)
            case -1753629499: return new limit.MultiDayLimit(_buf_)
            case -252187161: return new limit.WeeklyLimit(_buf_)
            case 2063279905: return new limit.MonthlyLimit(_buf_)
            case -1366194050: return new limit.CoolDown(_buf_)
            case 394328599: return new limit.GroupCoolDown(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
    }


    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace limit {

export  abstract  class DailyLimitBase  extends limit.LimitBase {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): DailyLimitBase {
        switch (_buf_.ReadInt()) {
            case 303235413: return new limit.DailyLimit(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
    }


    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace limit {

export  class DailyLimit  extends limit.DailyLimitBase {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.num = _buf_.ReadInt();
    }

    readonly num: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace limit {

export  class MultiDayLimit  extends limit.LimitBase {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.day = _buf_.ReadInt();
        this.num = _buf_.ReadInt();
    }

    readonly day: number
    readonly num: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace limit {

export  class WeeklyLimit  extends limit.LimitBase {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.num = _buf_.ReadInt();
    }

    readonly num: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace limit {

export  class MonthlyLimit  extends limit.LimitBase {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.num = _buf_.ReadInt();
    }

    readonly num: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace limit {

export  class CoolDown  extends limit.LimitBase {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.duration = _buf_.ReadInt();
    }

    readonly duration: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace limit {

export  class GroupCoolDown  extends limit.LimitBase {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.groupId = _buf_.ReadInt();
        this.duration = _buf_.ReadInt();
    }

    readonly groupId: number
    readonly duration: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace error {

export  class ErrorInfo  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.code = _buf_.ReadString();
        this.desc = _buf_.ReadString();
        this.style = error.ErrorStyle.constructorFrom(_buf_)
    }

    readonly code: string
    readonly desc: string
    readonly style: error.ErrorStyle

    resolve(_tables: Map<string, any>) {
        if (this.style != null) { this.style.resolve(_tables);}
    }
}

}





export namespace error {

export  abstract  class ErrorStyle  {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): ErrorStyle {
        switch (_buf_.ReadInt()) {
            case 1915239884: return new error.ErrorStyleTip(_buf_)
            case -1920482343: return new error.ErrorStyleMsgbox(_buf_)
            case -2010134516: return new error.ErrorStyleDlgOk(_buf_)
            case 971221414: return new error.ErrorStyleDlgOkCancel(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
    }


    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace error {

export  class ErrorStyleTip  extends error.ErrorStyle {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
    }


    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace error {

export  class ErrorStyleMsgbox  extends error.ErrorStyle {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.btnName = _buf_.ReadString();
        this.operation = _buf_.ReadInt();
    }

    readonly btnName: string
    readonly operation: error.EOperation

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace error {

export  class ErrorStyleDlgOk  extends error.ErrorStyle {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.btnName = _buf_.ReadString();
    }

    readonly btnName: string

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace error {

export  class ErrorStyleDlgOkCancel  extends error.ErrorStyle {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.btn1Name = _buf_.ReadString();
        this.btn2Name = _buf_.ReadString();
    }

    readonly btn1Name: string
    readonly btn2Name: string

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace error {

export  class CodeInfo  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.code = _buf_.ReadInt();
        this.key = _buf_.ReadString();
    }

    readonly code: error.EErrorCode
    readonly key: string

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace item {

export  class Item  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.name = _buf_.ReadString();
        this.majorType = _buf_.ReadInt();
        this.minorType = _buf_.ReadInt();
        this.quality = _buf_.ReadInt();
        this.icon = _buf_.ReadString();
        this.iconBackgroud = _buf_.ReadString();
        this.iconMask = _buf_.ReadString();
        this.desc = _buf_.ReadString();
        this.showOrder = _buf_.ReadInt();
        this.quantifier = _buf_.ReadString();
        this.showInBag = _buf_.ReadBool();
        this.minShowLevel = _buf_.ReadInt();
        this.batchUsable = _buf_.ReadBool();
        this.progressTimeWhenUse = _buf_.ReadFloat();
        this.showHintWhenUse = _buf_.ReadBool();
        this.droppable = _buf_.ReadBool();
        if(_buf_.ReadBool()) { this.price = _buf_.ReadInt(); } else { this.price = null }
        this.useType = _buf_.ReadInt();
        if(_buf_.ReadBool()) { this.levelUpId = _buf_.ReadInt(); } else { this.levelUpId = null }
    }

    readonly id: number
    readonly name: string
    readonly majorType: item.EMajorType
    readonly minorType: item.EMinorType
    readonly quality: item.EItemQuality
    readonly icon: string
    readonly iconBackgroud: string
    readonly iconMask: string
    readonly desc: string
    readonly showOrder: number
    readonly quantifier: string
    readonly showInBag: boolean
    readonly minShowLevel: number
    readonly batchUsable: boolean
    readonly progressTimeWhenUse: number
    readonly showHintWhenUse: boolean
    readonly droppable: boolean
    readonly price?: number
    readonly useType: item.EUseType
    readonly levelUpId?: number

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace item {

export  class ItemFunction  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.minorType = _buf_.ReadInt();
        this.funcType = _buf_.ReadInt();
        this.method = _buf_.ReadString();
        this.closeBagUi = _buf_.ReadBool();
    }

    readonly minorType: item.EMinorType
    readonly funcType: item.EItemFunctionType
    readonly method: string
    readonly closeBagUi: boolean

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace item {

export  abstract  class ItemExtra  {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): ItemExtra {
        switch (_buf_.ReadInt()) {
            case 1494222369: return new item.TreasureBox(_buf_)
            case 640937802: return new item.InteractionItem(_buf_)
            case 1659907149: return new item.Clothes(_buf_)
            case -1679179579: return new item.DesignDrawing(_buf_)
            case 896889705: return new item.Dymmy(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
    }

    readonly id: number

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace item {

export  class TreasureBox  extends item.ItemExtra {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        if(_buf_.ReadBool()) { this.keyItemId = _buf_.ReadInt(); } else { this.keyItemId = null }
        this.openLevel = new condition.MinLevel(_buf_)
        this.useOnObtain = _buf_.ReadBool();
        { this.dropIds = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt();; this.dropIds.push(_e) } }
        { this.chooseList = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :item.ChooseOneBonus;_e = new item.ChooseOneBonus(_buf_); this.chooseList.push(_e) } }
    }

    readonly keyItemId?: number
    readonly openLevel: condition.MinLevel
    readonly useOnObtain: boolean
    readonly dropIds: number[]
    readonly chooseList: item.ChooseOneBonus[]

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        if (this.openLevel != null) { this.openLevel.resolve(_tables);}
        for(let _e of this.chooseList) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





export namespace condition {

export  abstract  class Condition  {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): Condition {
        switch (_buf_.ReadInt()) {
            case 1069033789: return new condition.TimeRange(_buf_)
            case 934079583: return new condition.MultiRoleCondition(_buf_)
            case 103675143: return new condition.GenderLimit(_buf_)
            case -1075273755: return new condition.MinLevel(_buf_)
            case 700922899: return new condition.MaxLevel(_buf_)
            case 907499647: return new condition.MinMaxLevel(_buf_)
            case 696630835: return new condition.ClothesPropertyScoreGreaterThan(_buf_)
            case 1961145317: return new condition.ContainsItem(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
    }


    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace condition {

export  class TimeRange  extends condition.Condition {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.dateTimeRange = new common.DateTimeRange(_buf_)
    }

    readonly dateTimeRange: common.DateTimeRange

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        if (this.dateTimeRange != null) { this.dateTimeRange.resolve(_tables);}
    }
}

}





export namespace common {

export  class DateTimeRange  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        if(_buf_.ReadBool()) { this.startTime = _buf_.ReadInt(); } else { this.startTime = null }
        if(_buf_.ReadBool()) { this.endTime = _buf_.ReadInt(); } else { this.endTime = null }
    }

    readonly startTime?: number
    readonly endTime?: number

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace condition {

export  abstract  class RoleCondition  extends condition.Condition {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): RoleCondition {
        switch (_buf_.ReadInt()) {
            case 934079583: return new condition.MultiRoleCondition(_buf_)
            case 103675143: return new condition.GenderLimit(_buf_)
            case -1075273755: return new condition.MinLevel(_buf_)
            case 700922899: return new condition.MaxLevel(_buf_)
            case 907499647: return new condition.MinMaxLevel(_buf_)
            case 696630835: return new condition.ClothesPropertyScoreGreaterThan(_buf_)
            case 1961145317: return new condition.ContainsItem(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
    }


    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace condition {

export  class MultiRoleCondition  extends condition.RoleCondition {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.conditions = []; for(let i = 0 ; i < n ; i++) { let _e :condition.RoleCondition;_e = condition.RoleCondition.constructorFrom(_buf_); this.conditions.push(_e) } }
    }

    readonly conditions: condition.RoleCondition[]

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        for(let _e of this.conditions) { if (_e != null) { _e.resolve(_tables); } }
    }
}

}





export namespace condition {

export  abstract  class BoolRoleCondition  extends condition.RoleCondition {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): BoolRoleCondition {
        switch (_buf_.ReadInt()) {
            case 103675143: return new condition.GenderLimit(_buf_)
            case -1075273755: return new condition.MinLevel(_buf_)
            case 700922899: return new condition.MaxLevel(_buf_)
            case 907499647: return new condition.MinMaxLevel(_buf_)
            case 696630835: return new condition.ClothesPropertyScoreGreaterThan(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
    }


    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace condition {

export  class GenderLimit  extends condition.BoolRoleCondition {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.gender = _buf_.ReadInt();
    }

    readonly gender: role.EGenderType

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace condition {

export  class MinLevel  extends condition.BoolRoleCondition {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.level = _buf_.ReadInt();
    }

    readonly level: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace condition {

export  class MaxLevel  extends condition.BoolRoleCondition {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.level = _buf_.ReadInt();
    }

    readonly level: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace condition {

export  class MinMaxLevel  extends condition.BoolRoleCondition {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.min = _buf_.ReadInt();
        this.max = _buf_.ReadInt();
    }

    readonly min: number
    readonly max: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace condition {

export  class ClothesPropertyScoreGreaterThan  extends condition.BoolRoleCondition {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.prop = _buf_.ReadInt();
        this.value = _buf_.ReadInt();
    }

    readonly prop: item.EClothesPropertyType
    readonly value: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace condition {

export  class ContainsItem  extends condition.RoleCondition {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.itemId = _buf_.ReadInt();
        this.num = _buf_.ReadInt();
        this.reverse = _buf_.ReadBool();
    }

    readonly itemId: number
    itemId_Ref : item.Item
    readonly num: number
    readonly reverse: boolean

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        this.itemId_Ref = (_tables.get('item.TbItem') as item.TbItem).get(this.itemId)
    }
}

}





export namespace item {

export  class ChooseOneBonus  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.dropId = _buf_.ReadInt();
        this.isUnique = _buf_.ReadBool();
    }

    readonly dropId: number
    dropId_Ref : bonus.DropInfo
    readonly isUnique: boolean

    resolve(_tables: Map<string, any>) {
        this.dropId_Ref = (_tables.get('bonus.TbDrop') as bonus.TbDrop).get(this.dropId)
    }
}

}





export namespace item {

export  class InteractionItem  extends item.ItemExtra {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        if(_buf_.ReadBool()) { this.attackNum = _buf_.ReadInt(); } else { this.attackNum = null }
        this.holdingStaticMesh = _buf_.ReadString();
        this.holdingStaticMeshMat = _buf_.ReadString();
    }

    readonly attackNum?: number
    readonly holdingStaticMesh: string
    readonly holdingStaticMeshMat: string

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace item {

export  class Clothes  extends item.ItemExtra {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.attack = _buf_.ReadInt();
        this.hp = _buf_.ReadLong();
        this.energyLimit = _buf_.ReadInt();
        this.energyResume = _buf_.ReadInt();
    }

    readonly attack: number
    readonly hp: bigint
    readonly energyLimit: number
    readonly energyResume: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace item {

export  class DesignDrawing  extends item.ItemExtra {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        { this.learnComponentId = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt();; this.learnComponentId.push(_e) } }
    }

    readonly learnComponentId: number[]

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace item {

export  class Dymmy  extends item.ItemExtra {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.cost = cost.Cost.constructorFrom(_buf_)
    }

    readonly cost: cost.Cost

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        if (this.cost != null) { this.cost.resolve(_tables);}
    }
}

}





export namespace cost {

export  abstract  class Cost  {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): Cost {
        switch (_buf_.ReadInt()) {
            case 911838111: return new cost.CostCurrency(_buf_)
            case 103084157: return new cost.CostCurrencies(_buf_)
            case -1033587381: return new cost.CostOneItem(_buf_)
            case -1249440351: return new cost.CostItem(_buf_)
            case -77945102: return new cost.CostItems(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
    }


    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace cost {

export  class CostCurrency  extends cost.Cost {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.type = _buf_.ReadInt();
        this.num = _buf_.ReadInt();
    }

    readonly type: item.ECurrencyType
    readonly num: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace cost {

export  class CostCurrencies  extends cost.Cost {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        { this.currencies = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :cost.CostCurrency;_e = new cost.CostCurrency(_buf_); this.currencies.push(_e) } }
    }

    readonly currencies: cost.CostCurrency[]

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        for(let _e of this.currencies) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





export namespace cost {

export  class CostOneItem  extends cost.Cost {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.itemId = _buf_.ReadInt();
    }

    readonly itemId: number
    itemId_Ref : item.Item

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        this.itemId_Ref = (_tables.get('item.TbItem') as item.TbItem).get(this.itemId)
    }
}

}





export namespace cost {

export  class CostItem  extends cost.Cost {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.itemId = _buf_.ReadInt();
        this.amount = _buf_.ReadInt();
    }

    readonly itemId: number
    itemId_Ref : item.Item
    readonly amount: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        this.itemId_Ref = (_tables.get('item.TbItem') as item.TbItem).get(this.itemId)
    }
}

}





export namespace cost {

export  class CostItems  extends cost.Cost {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.itemList = []; for(let i = 0 ; i < n ; i++) { let _e :cost.CostItem;_e = new cost.CostItem(_buf_); this.itemList.push(_e) } }
    }

    readonly itemList: cost.CostItem[]

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        for(let _e of this.itemList) { if (_e != null) { _e.resolve(_tables); } }
    }
}

}





export namespace l10n {

export  class L10NDemo  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.text = _buf_.ReadString();
    }

    readonly id: number
    readonly text: string

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace l10n {

export  class PatchDemo  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.value = _buf_.ReadInt();
    }

    readonly id: number
    readonly value: number

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace mail {

export  class SystemMail  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.title = _buf_.ReadString();
        this.sender = _buf_.ReadString();
        this.content = _buf_.ReadString();
        { this.award = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt();; this.award.push(_e) } }
    }

    readonly id: number
    readonly title: string
    readonly sender: string
    readonly content: string
    readonly award: number[]

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace mail {

export  class GlobalMail  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.title = _buf_.ReadString();
        this.sender = _buf_.ReadString();
        this.content = _buf_.ReadString();
        { this.award = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt();; this.award.push(_e) } }
        this.allServer = _buf_.ReadBool();
        { this.serverList = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt();; this.serverList.push(_e) } }
        this.platform = _buf_.ReadString();
        this.channel = _buf_.ReadString();
        this.minMaxLevel = new condition.MinMaxLevel(_buf_)
        this.registerTime = new condition.TimeRange(_buf_)
        this.mailTime = new condition.TimeRange(_buf_)
    }

    readonly id: number
    readonly title: string
    readonly sender: string
    readonly content: string
    readonly award: number[]
    readonly allServer: boolean
    readonly serverList: number[]
    readonly platform: string
    readonly channel: string
    readonly minMaxLevel: condition.MinMaxLevel
    readonly registerTime: condition.TimeRange
    readonly mailTime: condition.TimeRange

    resolve(_tables: Map<string, any>) {
        if (this.minMaxLevel != null) { this.minMaxLevel.resolve(_tables);}
        if (this.registerTime != null) { this.registerTime.resolve(_tables);}
        if (this.mailTime != null) { this.mailTime.resolve(_tables);}
    }
}

}





export namespace role {

export  class LevelExpAttr  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.level = _buf_.ReadInt();
        this.needExp = _buf_.ReadLong();
        { this.clothesAttrs = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt();; this.clothesAttrs.push(_e) } }
    }

    readonly level: number
    readonly needExp: bigint
    readonly clothesAttrs: number[]

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace role {

export  class LevelBonus  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        { this.distinctBonusInfos = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :role.DistinctBonusInfos;_e = new role.DistinctBonusInfos(_buf_); this.distinctBonusInfos.push(_e) } }
    }

    readonly id: number
    readonly distinctBonusInfos: role.DistinctBonusInfos[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.distinctBonusInfos) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





export namespace role {

export  class DistinctBonusInfos  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.effectiveLevel = _buf_.ReadInt();
        { this.bonusInfo = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :role.BonusInfo;_e = new role.BonusInfo(_buf_); this.bonusInfo.push(_e) } }
    }

    readonly effectiveLevel: number
    readonly bonusInfo: role.BonusInfo[]

    resolve(_tables: Map<string, any>) {
        for(let _e of this.bonusInfo) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





export namespace role {

export  class BonusInfo  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.type = _buf_.ReadInt();
        this.coefficient = _buf_.ReadFloat();
    }

    readonly type: item.ECurrencyType
    readonly coefficient: number

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace tag {

export  class TestTag  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.value = _buf_.ReadString();
    }

    readonly id: number
    readonly value: string

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace test {

export  class DemoType2  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.x4 = _buf_.ReadInt();
        this.x1 = _buf_.ReadBool();
        this.x2 = _buf_.ReadByte();
        this.x3 = _buf_.ReadShort();
        this.x5 = _buf_.ReadLong();
        this.x6 = _buf_.ReadFloat();
        this.x7 = _buf_.ReadDouble();
        this.x80 = _buf_.ReadFshort();
        this.x8 = _buf_.ReadFint();
        this.x9 = _buf_.ReadFlong();
        this.x10 = _buf_.ReadString();
        this.x12 = new test.DemoType1(_buf_)
        this.x13 = _buf_.ReadInt();
        this.x14 = test.DemoDynamic.constructorFrom(_buf_)
        this.s1 = _buf_.ReadString();
        this.v2 = Vector2.from(_buf_)
        this.v3 = Vector3.from(_buf_)
        this.v4 = Vector4.from(_buf_)
        this.t1 = _buf_.ReadInt();
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.k1 = new Int32Array(n); for(let i = 0 ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt();; this.k1[i] = _e } }
        { this.k2 = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt();; this.k2.push(_e) } }
        { this.k3 = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt();; this.k3.push(_e) } }
        { this.k4 = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt();; this.k4.push(_e) } }
        { this.k5 = new Set<number>(); for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e:number;_e = _buf_.ReadInt(); this.k5.add(_e);}}
        { this.k6 = new Set<number>(); for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e:number;_e = _buf_.ReadInt(); this.k6.add(_e);}}
        { this.k7 = new Set<number>(); for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e:number;_e = _buf_.ReadInt(); this.k7.add(_e);}}
        { this.k8 = new Map<number, number>(); for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _k:number;  _k = _buf_.ReadInt();;  let _v:number;  _v = _buf_.ReadInt();     this.k8.set(_k, _v);  } }
        { this.k9 = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :test.DemoE2;_e = new test.DemoE2(_buf_); this.k9.push(_e) } }
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.k15 = []; for(let i = 0 ; i < n ; i++) { let _e :test.DemoDynamic;_e = test.DemoDynamic.constructorFrom(_buf_); this.k15.push(_e) } }
    }

    readonly x4: number
    readonly x1: boolean
    readonly x2: number
    readonly x3: number
    x3_Ref : test.DemoType2
    readonly x5: bigint
    readonly x6: number
    readonly x7: number
    readonly x80: number
    readonly x8: number
    readonly x9: bigint
    readonly x10: string
    readonly x12: test.DemoType1
    readonly x13: test.DemoEnum
    readonly x14: test.DemoDynamic
    readonly s1: string
    readonly v2: Vector2
    readonly v3: Vector3
    readonly v4: Vector4
    readonly t1: number
    readonly k1: Int32Array
    readonly k2: number[]
    readonly k3: number[]
    readonly k4: number[]
    readonly k5: Set<number>
    readonly k6: Set<number>
    readonly k7: Set<number>
    readonly k8: Map<number, number>
    readonly k9: test.DemoE2[]
    readonly k15: test.DemoDynamic[]

    resolve(_tables: Map<string, any>) {
        this.x3_Ref = (_tables.get('test.TbFullTypes') as test.TbFullTypes).get(this.x3)
        if (this.x12 != null) { this.x12.resolve(_tables);}
        if (this.x14 != null) { this.x14.resolve(_tables);}
        for(let _e of this.k9) { if (_e != null ) {_e.resolve(_tables);} }
        for(let _e of this.k15) { if (_e != null) { _e.resolve(_tables); } }
    }
}

}





export namespace test {

export  class DemoType1  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.x1 = _buf_.ReadInt();
    }

    readonly x1: number

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace test {

export  abstract  class DemoDynamic  {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): DemoDynamic {
        switch (_buf_.ReadInt()) {
            case -2138341747: return new test.DemoD2(_buf_)
            case -2138341717: return new test.DemoE1(_buf_)
            case -2138341744: return new test.DemoD5(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.x1 = _buf_.ReadInt();
    }

    readonly x1: number

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace test {

export  class DemoD2  extends test.DemoDynamic {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.x2 = _buf_.ReadInt();
    }

    readonly x2: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace test {

export  abstract  class DemoD3  extends test.DemoDynamic {
    static constructorFrom(_buf_: Bright.Serialization.ByteBuf): DemoD3 {
        switch (_buf_.ReadInt()) {
            case -2138341717: return new test.DemoE1(_buf_)
            default: throw new Error()
        }
    }

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.x3 = _buf_.ReadInt();
    }

    readonly x3: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace test {

export  class DemoE1  extends test.DemoD3 {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.x4 = _buf_.ReadInt();
    }

    readonly x4: number

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
    }
}

}





export namespace test {

export  class DemoD5  extends test.DemoDynamic {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        super(_buf_)
        this.time = new test.DateTimeRange(_buf_)
    }

    readonly time: test.DateTimeRange

    resolve(_tables: Map<string, any>) {
        super.resolve(_tables)
        if (this.time != null) { this.time.resolve(_tables);}
    }
}

}





export namespace test {

export  class DateTimeRange  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.startTime = _buf_.ReadInt();
        this.endTime = _buf_.ReadInt();
    }

    readonly startTime: number
    readonly endTime: number

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace test {

export  class DemoE2  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        if(_buf_.ReadBool()) { this.y1 = _buf_.ReadInt(); } else { this.y1 = null }
        this.y2 = _buf_.ReadBool();
    }

    readonly y1?: number
    readonly y2: boolean

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace test {

export  class DemoSingletonType  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.name = _buf_.ReadString();
        this.date = test.DemoDynamic.constructorFrom(_buf_)
    }

    readonly id: number
    readonly name: string
    readonly date: test.DemoDynamic

    resolve(_tables: Map<string, any>) {
        if (this.date != null) { this.date.resolve(_tables);}
    }
}

}





export namespace test {

export  class MultiRowRecord  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.name = _buf_.ReadString();
        { this.oneRows = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :test.MultiRowType1;_e = new test.MultiRowType1(_buf_); this.oneRows.push(_e) } }
        { this.multiRows1 = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :test.MultiRowType1;_e = new test.MultiRowType1(_buf_); this.multiRows1.push(_e) } }
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.multiRows2 = []; for(let i = 0 ; i < n ; i++) { let _e :test.MultiRowType1;_e = new test.MultiRowType1(_buf_); this.multiRows2.push(_e) } }
        { this.multiRows3 = new Set<test.MultiRowType2>(); for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e:test.MultiRowType2;_e = new test.MultiRowType2(_buf_) this.multiRows3.add(_e);}}
        { this.multiRows4 = new Map<number, test.MultiRowType2>(); for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _k:number;  _k = _buf_.ReadInt();;  let _v:test.MultiRowType2;  _v = new test.MultiRowType2(_buf_)     this.multiRows4.set(_k, _v);  } }
    }

    readonly id: number
    readonly name: string
    readonly oneRows: test.MultiRowType1[]
    readonly multiRows1: test.MultiRowType1[]
    readonly multiRows2: test.MultiRowType1[]
    readonly multiRows3: Set<test.MultiRowType2>
    readonly multiRows4: Map<number, test.MultiRowType2>

    resolve(_tables: Map<string, any>) {
        for(let _e of this.oneRows) { if (_e != null ) {_e.resolve(_tables);} }
        for(let _e of this.multiRows1) { if (_e != null ) {_e.resolve(_tables);} }
        for(let _e of this.multiRows2) { if (_e != null) { _e.resolve(_tables); } }
        for(let _e of this.multiRows4.values()) { if (_e != null) {_e.resolve(_tables);} }
    }
}

}





export namespace test {

export  class MultiRowType1  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.x = _buf_.ReadInt();
    }

    readonly id: number
    readonly x: number

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace test {

export  class MultiRowType2  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.x = _buf_.ReadInt();
        this.y = _buf_.ReadFloat();
    }

    readonly id: number
    readonly x: number
    readonly y: number

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace test {

export  class MultiRowTitle  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.name = _buf_.ReadString();
        this.x1 = new test.H1(_buf_)
        { this.x2 = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :test.H2;_e = new test.H2(_buf_); this.x2.push(_e) } }
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.x3 = []; for(let i = 0 ; i < n ; i++) { let _e :test.H2;_e = new test.H2(_buf_); this.x3.push(_e) } }
    }

    readonly id: number
    readonly name: string
    readonly x1: test.H1
    readonly x2: test.H2[]
    readonly x3: test.H2[]

    resolve(_tables: Map<string, any>) {
        if (this.x1 != null) { this.x1.resolve(_tables);}
        for(let _e of this.x2) { if (_e != null ) {_e.resolve(_tables);} }
        for(let _e of this.x3) { if (_e != null) { _e.resolve(_tables); } }
    }
}

}





export namespace test {

export  class H1  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.y2 = new test.H2(_buf_)
        this.y3 = _buf_.ReadInt();
    }

    readonly y2: test.H2
    readonly y3: number

    resolve(_tables: Map<string, any>) {
        if (this.y2 != null) { this.y2.resolve(_tables);}
    }
}

}





export namespace test {

export  class H2  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.z2 = _buf_.ReadInt();
        this.z3 = _buf_.ReadInt();
    }

    readonly z2: number
    readonly z3: number

    resolve(_tables: Map<string, any>) {
    }
}

}





export namespace test {

export  class TestNull  {

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        if(_buf_.ReadBool()) { this.x1 = _buf_.ReadInt(); } else { this.x1 = null }
        if(_buf_.ReadBool()) { this.x2 = _buf_.ReadInt(); } else { this.x2 = null }
        if(_buf_.ReadBool()) { this.x3 = new test.DemoType1(_buf_) } else { this.x3 = null }
        if(_buf_.ReadBool()) { this.x4 = test.DemoDynamic.constructorFrom(_buf_) } else { this.x4 = null }
    }

    readonly id: number
    readonly x1?: number
    readonly x2?: test.DemoEnum
    readonly x3?: test.DemoType1
    readonly x4?: test.DemoDynamic

    resolve(_tables: Map<string, any>) {
        if (this.x3 != null) { this.x3.resolve(_tables);}
        if (this.x4 != null) { this.x4.resolve(_tables);}
    }
}

}


   
export namespace ai {
export class TbBlackboard {
    private _dataMap: Map<string, ai.Blackboard>
    private _dataList: ai.Blackboard[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<string, ai.Blackboard>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: ai.Blackboard
            _v = new ai.Blackboard(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.name, _v)
        }
    }

    getDataMap(): Map<string, ai.Blackboard> { return this._dataMap }
    getDataList(): ai.Blackboard[] { return this._dataList }

    get(key: string): ai.Blackboard  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace ai {
export class TbBehaviorTree {
    private _dataMap: Map<number, ai.BehaviorTree>
    private _dataList: ai.BehaviorTree[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, ai.BehaviorTree>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: ai.BehaviorTree
            _v = new ai.BehaviorTree(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, ai.BehaviorTree> { return this._dataMap }
    getDataList(): ai.BehaviorTree[] { return this._dataList }

    get(key: number): ai.BehaviorTree  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace blueprint {
export class TbClazz {
    private _dataMap: Map<string, blueprint.Clazz>
    private _dataList: blueprint.Clazz[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<string, blueprint.Clazz>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: blueprint.Clazz
            _v = blueprint.Clazz.constructorFrom(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.name, _v)
        }
    }

    getDataMap(): Map<string, blueprint.Clazz> { return this._dataMap }
    getDataList(): blueprint.Clazz[] { return this._dataList }

    get(key: string): blueprint.Clazz  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace bonus {
export class TbDrop {
    private _dataMap: Map<number, bonus.DropInfo>
    private _dataList: bonus.DropInfo[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, bonus.DropInfo>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: bonus.DropInfo
            _v = new bonus.DropInfo(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, bonus.DropInfo> { return this._dataMap }
    getDataList(): bonus.DropInfo[] { return this._dataList }

    get(key: number): bonus.DropInfo  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace common {
export class TbGlobalConfig {

     private _data: common.GlobalConfig

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        if (_buf_.ReadInt() != 1) throw new Error('table mode=one, but size != 1')
        this._data = new common.GlobalConfig(_buf_)
    }

    getData(): common.GlobalConfig { return this._data }

     get bagCapacity(): number { return this._data.bagCapacity }
     get bagCapacitySpecial(): number { return this._data.bagCapacitySpecial }
     get bagTempExpendableCapacity(): number { return this._data.bagTempExpendableCapacity }
     get bagTempToolCapacity(): number { return this._data.bagTempToolCapacity }
     get bagInitCapacity(): number { return this._data.bagInitCapacity }
     get quickBagCapacity(): number { return this._data.quickBagCapacity }
     get clothBagCapacity(): number { return this._data.clothBagCapacity }
     get clothBagInitCapacity(): number { return this._data.clothBagInitCapacity }
     get clothBagCapacitySpecial(): number { return this._data.clothBagCapacitySpecial }
     get bagInitItemsDropId(): number { return this._data.bagInitItemsDropId }
     get mailBoxCapacity(): number { return this._data.mailBoxCapacity }
     get damageParamC(): number { return this._data.damageParamC }
     get damageParamE(): number { return this._data.damageParamE }
     get damageParamF(): number { return this._data.damageParamF }
     get damageParamD(): number { return this._data.damageParamD }
     get roleSpeed(): number { return this._data.roleSpeed }
     get monsterSpeed(): number { return this._data.monsterSpeed }
     get initEnergy(): number { return this._data.initEnergy }
     get initViality(): number { return this._data.initViality }
     get maxViality(): number { return this._data.maxViality }
     get perVialityRecoveryTime(): number { return this._data.perVialityRecoveryTime }

    resolve(_tables: Map<string, any>) {
        this._data.resolve(_tables)
    }

    
}
}


   
export namespace common {
export class TbDummy {
    private _dataMap: Map<number, common.Dummy>
    private _dataList: common.Dummy[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, common.Dummy>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: common.Dummy
            _v = new common.Dummy(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, common.Dummy> { return this._dataMap }
    getDataList(): common.Dummy[] { return this._dataList }

    get(key: number): common.Dummy  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace error {
export class TbErrorInfo {
    private _dataMap: Map<string, error.ErrorInfo>
    private _dataList: error.ErrorInfo[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<string, error.ErrorInfo>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: error.ErrorInfo
            _v = new error.ErrorInfo(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.code, _v)
        }
    }

    getDataMap(): Map<string, error.ErrorInfo> { return this._dataMap }
    getDataList(): error.ErrorInfo[] { return this._dataList }

    get(key: string): error.ErrorInfo  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace error {
export class TbCodeInfo {
    private _dataMap: Map<error.EErrorCode, error.CodeInfo>
    private _dataList: error.CodeInfo[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<error.EErrorCode, error.CodeInfo>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: error.CodeInfo
            _v = new error.CodeInfo(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.code, _v)
        }
    }

    getDataMap(): Map<error.EErrorCode, error.CodeInfo> { return this._dataMap }
    getDataList(): error.CodeInfo[] { return this._dataList }

    get(key: error.EErrorCode): error.CodeInfo  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace item {
export class TbItem {
    private _dataMap: Map<number, item.Item>
    private _dataList: item.Item[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, item.Item>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: item.Item
            _v = new item.Item(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, item.Item> { return this._dataMap }
    getDataList(): item.Item[] { return this._dataList }

    get(key: number): item.Item  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace item {
export class TbItemFunc {
    private _dataMap: Map<item.EMinorType, item.ItemFunction>
    private _dataList: item.ItemFunction[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<item.EMinorType, item.ItemFunction>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: item.ItemFunction
            _v = new item.ItemFunction(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.minorType, _v)
        }
    }

    getDataMap(): Map<item.EMinorType, item.ItemFunction> { return this._dataMap }
    getDataList(): item.ItemFunction[] { return this._dataList }

    get(key: item.EMinorType): item.ItemFunction  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace item {
export class TbItemExtra {
    private _dataMap: Map<number, item.ItemExtra>
    private _dataList: item.ItemExtra[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, item.ItemExtra>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: item.ItemExtra
            _v = item.ItemExtra.constructorFrom(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, item.ItemExtra> { return this._dataMap }
    getDataList(): item.ItemExtra[] { return this._dataList }

    get(key: number): item.ItemExtra  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace l10n {
export class TbL10NDemo {
    private _dataMap: Map<number, l10n.L10NDemo>
    private _dataList: l10n.L10NDemo[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, l10n.L10NDemo>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: l10n.L10NDemo
            _v = new l10n.L10NDemo(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, l10n.L10NDemo> { return this._dataMap }
    getDataList(): l10n.L10NDemo[] { return this._dataList }

    get(key: number): l10n.L10NDemo  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace l10n {
export class TbPatchDemo {
    private _dataMap: Map<number, l10n.PatchDemo>
    private _dataList: l10n.PatchDemo[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, l10n.PatchDemo>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: l10n.PatchDemo
            _v = new l10n.PatchDemo(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, l10n.PatchDemo> { return this._dataMap }
    getDataList(): l10n.PatchDemo[] { return this._dataList }

    get(key: number): l10n.PatchDemo  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace mail {
export class TbSystemMail {
    private _dataMap: Map<number, mail.SystemMail>
    private _dataList: mail.SystemMail[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, mail.SystemMail>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: mail.SystemMail
            _v = new mail.SystemMail(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, mail.SystemMail> { return this._dataMap }
    getDataList(): mail.SystemMail[] { return this._dataList }

    get(key: number): mail.SystemMail  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace mail {
export class TbGlobalMail {
    private _dataMap: Map<number, mail.GlobalMail>
    private _dataList: mail.GlobalMail[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, mail.GlobalMail>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: mail.GlobalMail
            _v = new mail.GlobalMail(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, mail.GlobalMail> { return this._dataMap }
    getDataList(): mail.GlobalMail[] { return this._dataList }

    get(key: number): mail.GlobalMail  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace role {
export class TbRoleLevelExpAttr {
    private _dataMap: Map<number, role.LevelExpAttr>
    private _dataList: role.LevelExpAttr[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, role.LevelExpAttr>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: role.LevelExpAttr
            _v = new role.LevelExpAttr(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.level, _v)
        }
    }

    getDataMap(): Map<number, role.LevelExpAttr> { return this._dataMap }
    getDataList(): role.LevelExpAttr[] { return this._dataList }

    get(key: number): role.LevelExpAttr  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace role {
export class TbRoleLevelBonusCoefficient {
    private _dataMap: Map<number, role.LevelBonus>
    private _dataList: role.LevelBonus[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, role.LevelBonus>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: role.LevelBonus
            _v = new role.LevelBonus(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, role.LevelBonus> { return this._dataMap }
    getDataList(): role.LevelBonus[] { return this._dataList }

    get(key: number): role.LevelBonus  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace tag {
export class TbTestTag {
    private _dataMap: Map<number, tag.TestTag>
    private _dataList: tag.TestTag[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, tag.TestTag>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: tag.TestTag
            _v = new tag.TestTag(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, tag.TestTag> { return this._dataMap }
    getDataList(): tag.TestTag[] { return this._dataList }

    get(key: number): tag.TestTag  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace test {
export class TbFullTypes {
    private _dataMap: Map<number, test.DemoType2>
    private _dataList: test.DemoType2[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, test.DemoType2>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: test.DemoType2
            _v = new test.DemoType2(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.x3, _v)
        }
    }

    getDataMap(): Map<number, test.DemoType2> { return this._dataMap }
    getDataList(): test.DemoType2[] { return this._dataList }

    get(key: number): test.DemoType2  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace test {
export class TbSingleton {

     private _data: test.DemoSingletonType

    constructor(_buf_: Bright.Serialization.ByteBuf) {
        if (_buf_.ReadInt() != 1) throw new Error('table mode=one, but size != 1')
        this._data = new test.DemoSingletonType(_buf_)
    }

    getData(): test.DemoSingletonType { return this._data }

     get id(): number { return this._data.id }
     get name(): string { return this._data.name }
     get date(): test.DemoDynamic { return this._data.date }

    resolve(_tables: Map<string, any>) {
        this._data.resolve(_tables)
    }

    
}
}


   
export namespace test {
export class TbDataFromJson {
    private _dataMap: Map<number, test.DemoType2>
    private _dataList: test.DemoType2[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, test.DemoType2>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: test.DemoType2
            _v = new test.DemoType2(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.x4, _v)
        }
    }

    getDataMap(): Map<number, test.DemoType2> { return this._dataMap }
    getDataList(): test.DemoType2[] { return this._dataList }

    get(key: number): test.DemoType2  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace test {
export class TbDataFromXml {
    private _dataMap: Map<number, test.DemoType2>
    private _dataList: test.DemoType2[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, test.DemoType2>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: test.DemoType2
            _v = new test.DemoType2(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.x4, _v)
        }
    }

    getDataMap(): Map<number, test.DemoType2> { return this._dataMap }
    getDataList(): test.DemoType2[] { return this._dataList }

    get(key: number): test.DemoType2  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace test {
export class TbDataFromLua {
    private _dataMap: Map<number, test.DemoType2>
    private _dataList: test.DemoType2[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, test.DemoType2>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: test.DemoType2
            _v = new test.DemoType2(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.x4, _v)
        }
    }

    getDataMap(): Map<number, test.DemoType2> { return this._dataMap }
    getDataList(): test.DemoType2[] { return this._dataList }

    get(key: number): test.DemoType2  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace test {
export class TbMultiRowRecord {
    private _dataMap: Map<number, test.MultiRowRecord>
    private _dataList: test.MultiRowRecord[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, test.MultiRowRecord>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: test.MultiRowRecord
            _v = new test.MultiRowRecord(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.MultiRowRecord> { return this._dataMap }
    getDataList(): test.MultiRowRecord[] { return this._dataList }

    get(key: number): test.MultiRowRecord  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace test {
export class TbMultiRowTitle {
    private _dataMap: Map<number, test.MultiRowTitle>
    private _dataList: test.MultiRowTitle[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, test.MultiRowTitle>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: test.MultiRowTitle
            _v = new test.MultiRowTitle(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.MultiRowTitle> { return this._dataMap }
    getDataList(): test.MultiRowTitle[] { return this._dataList }

    get(key: number): test.MultiRowTitle  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}


   
export namespace test {
export class TbTestNull {
    private _dataMap: Map<number, test.TestNull>
    private _dataList: test.TestNull[]
    
    constructor(_buf_: Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, test.TestNull>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: test.TestNull
            _v = new test.TestNull(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.TestNull> { return this._dataMap }
    getDataList(): test.TestNull[] { return this._dataList }

    get(key: number): test.TestNull  { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }


}
}




type ByteBufLoader = (file: string) => Bright.Serialization.ByteBuf

export class Tables {
    private _TbBlackboard: ai.TbBlackboard
    get TbBlackboard(): ai.TbBlackboard  { return this._TbBlackboard}
    private _TbBehaviorTree: ai.TbBehaviorTree
    get TbBehaviorTree(): ai.TbBehaviorTree  { return this._TbBehaviorTree}
    private _TbClazz: blueprint.TbClazz
    get TbClazz(): blueprint.TbClazz  { return this._TbClazz}
    private _TbDrop: bonus.TbDrop
    get TbDrop(): bonus.TbDrop  { return this._TbDrop}
    private _TbGlobalConfig: common.TbGlobalConfig
    get TbGlobalConfig(): common.TbGlobalConfig  { return this._TbGlobalConfig}
    private _TbDummy: common.TbDummy
    get TbDummy(): common.TbDummy  { return this._TbDummy}
    private _TbErrorInfo: error.TbErrorInfo
    get TbErrorInfo(): error.TbErrorInfo  { return this._TbErrorInfo}
    private _TbCodeInfo: error.TbCodeInfo
    get TbCodeInfo(): error.TbCodeInfo  { return this._TbCodeInfo}
    private _TbItem: item.TbItem
    get TbItem(): item.TbItem  { return this._TbItem}
    private _TbItemFunc: item.TbItemFunc
    get TbItemFunc(): item.TbItemFunc  { return this._TbItemFunc}
    private _TbItemExtra: item.TbItemExtra
    get TbItemExtra(): item.TbItemExtra  { return this._TbItemExtra}
    private _TbL10NDemo: l10n.TbL10NDemo
    get TbL10NDemo(): l10n.TbL10NDemo  { return this._TbL10NDemo}
    private _TbPatchDemo: l10n.TbPatchDemo
    get TbPatchDemo(): l10n.TbPatchDemo  { return this._TbPatchDemo}
    private _TbSystemMail: mail.TbSystemMail
    get TbSystemMail(): mail.TbSystemMail  { return this._TbSystemMail}
    private _TbGlobalMail: mail.TbGlobalMail
    get TbGlobalMail(): mail.TbGlobalMail  { return this._TbGlobalMail}
    private _TbRoleLevelExpAttr: role.TbRoleLevelExpAttr
    get TbRoleLevelExpAttr(): role.TbRoleLevelExpAttr  { return this._TbRoleLevelExpAttr}
    private _TbRoleLevelBonusCoefficient: role.TbRoleLevelBonusCoefficient
    get TbRoleLevelBonusCoefficient(): role.TbRoleLevelBonusCoefficient  { return this._TbRoleLevelBonusCoefficient}
    private _TbTestTag: tag.TbTestTag
    get TbTestTag(): tag.TbTestTag  { return this._TbTestTag}
    private _TbFullTypes: test.TbFullTypes
    get TbFullTypes(): test.TbFullTypes  { return this._TbFullTypes}
    private _TbSingleton: test.TbSingleton
    get TbSingleton(): test.TbSingleton  { return this._TbSingleton}
    private _TbDataFromJson: test.TbDataFromJson
    get TbDataFromJson(): test.TbDataFromJson  { return this._TbDataFromJson}
    private _TbDataFromXml: test.TbDataFromXml
    get TbDataFromXml(): test.TbDataFromXml  { return this._TbDataFromXml}
    private _TbDataFromLua: test.TbDataFromLua
    get TbDataFromLua(): test.TbDataFromLua  { return this._TbDataFromLua}
    private _TbMultiRowRecord: test.TbMultiRowRecord
    get TbMultiRowRecord(): test.TbMultiRowRecord  { return this._TbMultiRowRecord}
    private _TbMultiRowTitle: test.TbMultiRowTitle
    get TbMultiRowTitle(): test.TbMultiRowTitle  { return this._TbMultiRowTitle}
    private _TbTestNull: test.TbTestNull
    get TbTestNull(): test.TbTestNull  { return this._TbTestNull}

    constructor(loader: ByteBufLoader) {
        let tables = new Map<string, any>()
        this._TbBlackboard = new ai.TbBlackboard(loader('ai.TbBlackboard.bin')) 
        tables.set('ai.TbBlackboard', this._TbBlackboard)
        this._TbBehaviorTree = new ai.TbBehaviorTree(loader('ai.TbBehaviorTree.bin')) 
        tables.set('ai.TbBehaviorTree', this._TbBehaviorTree)
        this._TbClazz = new blueprint.TbClazz(loader('blueprint.TbClazz.bin')) 
        tables.set('blueprint.TbClazz', this._TbClazz)
        this._TbDrop = new bonus.TbDrop(loader('bonus.TbDrop.bin')) 
        tables.set('bonus.TbDrop', this._TbDrop)
        this._TbGlobalConfig = new common.TbGlobalConfig(loader('common.TbGlobalConfig.bin')) 
        tables.set('common.TbGlobalConfig', this._TbGlobalConfig)
        this._TbDummy = new common.TbDummy(loader('common.TbDummy.bin')) 
        tables.set('common.TbDummy', this._TbDummy)
        this._TbErrorInfo = new error.TbErrorInfo(loader('error.TbErrorInfo.bin')) 
        tables.set('error.TbErrorInfo', this._TbErrorInfo)
        this._TbCodeInfo = new error.TbCodeInfo(loader('error.TbCodeInfo.bin')) 
        tables.set('error.TbCodeInfo', this._TbCodeInfo)
        this._TbItem = new item.TbItem(loader('item.TbItem.bin')) 
        tables.set('item.TbItem', this._TbItem)
        this._TbItemFunc = new item.TbItemFunc(loader('item.TbItemFunc.bin')) 
        tables.set('item.TbItemFunc', this._TbItemFunc)
        this._TbItemExtra = new item.TbItemExtra(loader('item.TbItemExtra.bin')) 
        tables.set('item.TbItemExtra', this._TbItemExtra)
        this._TbL10NDemo = new l10n.TbL10NDemo(loader('l10n.TbL10NDemo.bin')) 
        tables.set('l10n.TbL10NDemo', this._TbL10NDemo)
        this._TbPatchDemo = new l10n.TbPatchDemo(loader('l10n.TbPatchDemo.bin')) 
        tables.set('l10n.TbPatchDemo', this._TbPatchDemo)
        this._TbSystemMail = new mail.TbSystemMail(loader('mail.TbSystemMail.bin')) 
        tables.set('mail.TbSystemMail', this._TbSystemMail)
        this._TbGlobalMail = new mail.TbGlobalMail(loader('mail.TbGlobalMail.bin')) 
        tables.set('mail.TbGlobalMail', this._TbGlobalMail)
        this._TbRoleLevelExpAttr = new role.TbRoleLevelExpAttr(loader('role.TbRoleLevelExpAttr.bin')) 
        tables.set('role.TbRoleLevelExpAttr', this._TbRoleLevelExpAttr)
        this._TbRoleLevelBonusCoefficient = new role.TbRoleLevelBonusCoefficient(loader('role.TbRoleLevelBonusCoefficient.bin')) 
        tables.set('role.TbRoleLevelBonusCoefficient', this._TbRoleLevelBonusCoefficient)
        this._TbTestTag = new tag.TbTestTag(loader('tag.TbTestTag.bin')) 
        tables.set('tag.TbTestTag', this._TbTestTag)
        this._TbFullTypes = new test.TbFullTypes(loader('test.TbFullTypes.bin')) 
        tables.set('test.TbFullTypes', this._TbFullTypes)
        this._TbSingleton = new test.TbSingleton(loader('test.TbSingleton.bin')) 
        tables.set('test.TbSingleton', this._TbSingleton)
        this._TbDataFromJson = new test.TbDataFromJson(loader('test.TbDataFromJson.bin')) 
        tables.set('test.TbDataFromJson', this._TbDataFromJson)
        this._TbDataFromXml = new test.TbDataFromXml(loader('test.TbDataFromXml.bin')) 
        tables.set('test.TbDataFromXml', this._TbDataFromXml)
        this._TbDataFromLua = new test.TbDataFromLua(loader('test.TbDataFromLua.bin')) 
        tables.set('test.TbDataFromLua', this._TbDataFromLua)
        this._TbMultiRowRecord = new test.TbMultiRowRecord(loader('test.TbMultiRowRecord.bin')) 
        tables.set('test.TbMultiRowRecord', this._TbMultiRowRecord)
        this._TbMultiRowTitle = new test.TbMultiRowTitle(loader('test.TbMultiRowTitle.bin')) 
        tables.set('test.TbMultiRowTitle', this._TbMultiRowTitle)
        this._TbTestNull = new test.TbTestNull(loader('test.TbTestNull.bin')) 
        tables.set('test.TbTestNull', this._TbTestNull)

        this._TbBlackboard.resolve(tables) 
        this._TbBehaviorTree.resolve(tables) 
        this._TbClazz.resolve(tables) 
        this._TbDrop.resolve(tables) 
        this._TbGlobalConfig.resolve(tables) 
        this._TbDummy.resolve(tables) 
        this._TbErrorInfo.resolve(tables) 
        this._TbCodeInfo.resolve(tables) 
        this._TbItem.resolve(tables) 
        this._TbItemFunc.resolve(tables) 
        this._TbItemExtra.resolve(tables) 
        this._TbL10NDemo.resolve(tables) 
        this._TbPatchDemo.resolve(tables) 
        this._TbSystemMail.resolve(tables) 
        this._TbGlobalMail.resolve(tables) 
        this._TbRoleLevelExpAttr.resolve(tables) 
        this._TbRoleLevelBonusCoefficient.resolve(tables) 
        this._TbTestTag.resolve(tables) 
        this._TbFullTypes.resolve(tables) 
        this._TbSingleton.resolve(tables) 
        this._TbDataFromJson.resolve(tables) 
        this._TbDataFromXml.resolve(tables) 
        this._TbDataFromLua.resolve(tables) 
        this._TbMultiRowRecord.resolve(tables) 
        this._TbMultiRowTitle.resolve(tables) 
        this._TbTestNull.resolve(tables) 
    }
}


}