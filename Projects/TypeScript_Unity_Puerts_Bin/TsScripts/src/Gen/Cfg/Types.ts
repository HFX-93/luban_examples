
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

import {Bright} from 'csharp'

export namespace cfg {


export class Vector2 {
        x: number;
        y: number;
        constructor(x: number, y: number) {
            this.x = x;
            this.y = y;
        }

        static from(_buf_: Bright.Serialization.ByteBuf): Vector2 {
            let x = _buf_.ReadFloat();
            let y = _buf_.ReadFloat();
            return new Vector2(x, y);
        }
    }


    export class Vector3 {
        x: number;
        y: number;
        z: number;
        constructor(x: number, y: number, z: number) {
            this.x = x;
            this.y = y;
            this.z = z;
        }

        static from(_buf_: Bright.Serialization.ByteBuf): Vector3 {
            let x = _buf_.ReadFloat();
            let y = _buf_.ReadFloat();
            let z = _buf_.ReadFloat();
            return new Vector3(x, y, z);
        }
    }

    export class Vector4 {
        x: number;
        y: number;
        z: number;
        w: number;
        constructor(x: number, y: number, z: number, w: number) {
            this.x = x;
            this.y = y;
            this.z = z;
            this.w = w;
        }

        static from(_buf_: Bright.Serialization.ByteBuf): Vector4 {
            let x = _buf_.ReadFloat();
            let y = _buf_.ReadFloat();
            let z = _buf_.ReadFloat();
            let w = _buf_.ReadFloat();
            return new Vector4(x, y, z, w);
        }
    }



namespace ai {
export enum EExecutor {
    CLIENT = 0,
    SERVER = 1,
}
}



namespace ai {
export enum EKeyType {
    BOOL = 1,
    INT = 2,
    FLOAT = 3,
    STRING = 4,
    VECTOR = 5,
    ROTATOR = 6,
    NAME = 7,
    CLASS = 8,
    ENUM = 9,
    OBJECT = 10,
}
}



namespace ai {
export enum EFlowAbortMode {
    NONE = 0,
    LOWER_PRIORITY = 1,
    SELF = 2,
    BOTH = 3,
}
}



namespace ai {
export enum EFinishMode {
    IMMEDIATE = 0,
    DELAYED = 1,
}
}



namespace ai {
export enum ENotifyObserverMode {
    ON_VALUE_CHANGE = 0,
    ON_RESULT_CHANGE = 1,
}
}



namespace ai {
export enum EOperator {
    IS_EQUAL_TO = 0,
    IS_NOT_EQUAL_TO = 1,
    IS_LESS_THAN = 2,
    IS_LESS_THAN_OR_EQUAL_TO = 3,
    IS_GREAT_THAN = 4,
    IS_GREAT_THAN_OR_EQUAL_TO = 5,
    CONTAINS = 6,
    NOT_CONTAINS = 7,
}
}



namespace common {
export enum EBoolOperator {
    AND = 0,
    OR = 1,
}
}



namespace error {
export enum EOperation {
    LOGOUT = 0,
    RESTART = 1,
}
}



namespace error {
export enum EErrorCode {
    OK = 0,
    SERVER_NOT_EXISTS = 1,
    HAS_BIND_SERVER = 2,
    AUTH_FAIL = 3,
    NOT_BIND_SERVER = 4,
    SERVER_ACCESS_FAIL = 5,
    EXAMPLE_FLASH = 6,
    EXAMPLE_MSGBOX = 7,
    EXAMPLE_DLG_OK = 8,
    EXAMPLE_DLG_OK_CANCEL = 9,
    ROLE_CREATE_NAME_INVALID_CHAR = 100,
    ROLE_CREATE_NAME_EMPTY = 101,
    ROLE_CREATE_NAME_EXCEED_MAX_LENGTH = 102,
    ROLE_CREATE_ROLE_LIST_FULL = 103,
    ROLE_CREATE_INVALID_PROFESSION = 104,
    ROLE_CREATE_INVALID_GENDER = 105,
    ROLE_NOT_OWNED_BY_USER = 106,
    ROLE_LEVEL_NOT_ARRIVE = 107,
    PARAM_ILLEGAL = 200,
    TEMP_BAG_NOT_EMPTY = 201,
    ITEM_CAN_NOT_USE = 202,
    CURRENCY_NOT_ENOUGH = 203,
    BAG_IS_FULL = 204,
    ITEM_NOT_ENOUGH = 205,
    ITEM_IN_BAG = 206,
    GENDER_NOT_MATCH = 300,
    LEVEL_TOO_LOW = 301,
    LEVEL_TOO_HIGH = 302,
    EXCEED_LIMIT = 303,
    OVER_TIME = 304,
    SERVER_ERROR = 305,
    SKILL_NOT_IN_LIST = 400,
    SKILL_NOT_COOLDOWN = 401,
    SKILL_TARGET_NOT_EXIST = 402,
    SKILL_ANOTHER_CASTING = 403,
    SKILL_OUT_OF_DISTANCE = 404,
    SKILL_TARGET_CAMP_NOT_MATCH = 405,
    SKILL_INVALID_DIRECTION = 406,
    SKILL_NOT_IN_SELECT_SHAPE = 407,
    SKILL_ENERGY_NOT_ENOUGH = 408,
    DIALOG_NODE_NOT_CHOOSEN = 500,
    DIALOG_NOT_FINISH = 501,
    DIALOG_HAS_FINISH = 502,
    QUEST_STAGE_NOT_FINISHED = 503,
    QUEST_NOT_DOING = 504,
    QUEST_STAGE_NOT_DOING = 505,
    QUEST_HAS_ACCEPTED = 506,
    MAP_OBJECT_NOT_EXIST = 600,
    INTERACTION_OBJECT_NOT_SUPPORT_OPERATION = 601,
    HAS_NOT_EQUIP = 602,
    HANDHELD_EQUIP_ID_NOT_MATCH = 603,
    NOT_AVAILABLE_SUIT_ID = 604,
    NO_INTERACTION_COMPONENT = 605,
    HAS_INTERACTED = 606,
    VIALITY_NOT_ENOUGH = 607,
    PLAYER_SESSION_NOT_EXIST = 608,
    PLAYER_SESSION_WORLD_PLAYER_NOT_INIT = 609,
    MAP_NOT_EXIST = 610,
    MAIL_TYPE_ERROR = 700,
    MAIL_NOT_EXITST = 701,
    MAIL_HAVE_DELETED = 702,
    MAIL_AWARD_HAVE_RECEIVED = 703,
    MAIL_OPERATE_TYPE_ERROR = 704,
    MAIL_CONDITION_NOT_MEET = 705,
    MAIL_STATE_ERROR = 706,
    MAIL_NO_AWARD = 707,
    MAIL_BOX_IS_FULL = 708,
    PROP_SCORE_NOT_BIGGER_THAN = 800,
    NOT_WEAR_CLOTHES = 801,
    NOT_WEAR_SUIT = 802,
    SUIT_NOT_UNLOCK = 900,
    SUIT_COMPONENT_NOT_UNLOCK = 901,
    SUIT_STATE_ERROR = 902,
    SUIT_COMPONENT_STATE_ERROR = 903,
    SUIT_COMPONENT_NO_NEED_LEARN = 904,
    STORE_NOT_ENABLED = 1000,
    SHELF_NOT_ENABLED = 1001,
    GOODS_NOT_ENABLED = 1002,
    GOODS_NOT_IN_CUR_REFRESH = 1003,
    RETRY = 1100,
    NOT_COOLDOWN = 1101,
    SELFIE_UNLOCK = 1200,
    SELFIE_ALREADY_UNLOCK = 1201,
    SELFIE_LACK_STARTS = 1202,
    SELFIE_HAD_REWARD = 1203,
}
}



namespace item {
export enum EItemQuality {
    WHITE = 0,
    GREEN = 1,
    BLUE = 2,
    PURPLE = 3,
    GOLDEN = 4,
}
}



namespace item {
export enum ECurrencyType {
    DIAMOND = 1,
    GOLD = 2,
    SILVER = 3,
    EXP = 4,
    POWER_POINT = 5,
}
}



namespace item {
export enum EMajorType {
    CURRENCY = 1,
    CLOTH = 2,
    QUEST = 3,
    CONSUMABLES = 4,
    TREASURE_BOX = 5,
    ACHIEVEMENT_AND_TITLE = 6,
    HEAD_FRAME = 7,
    VOICE = 8,
    ACTION = 9,
    EXPANSION = 10,
    MATERIAL = 11,
}
}



namespace item {
export enum EMinorType {
    DIAMOND = 101,
    GOLD = 102,
    SILVER = 103,
    EXP = 104,
    POWER_POINT = 105,
    HAIR_STYLE = 210,
    COAT = 220,
    UPPER_JACKET = 230,
    TROUSERS = 241,
    SKIRT = 242,
    SOCKS = 250,
    SHOES = 260,
    HAIR_ACCESSORY = 271,
    HAT = 272,
    EARRING = 273,
    NECKLACE = 274,
    BRACELET = 275,
    HAIR_CLASP = 276,
    GLOVE = 277,
    HANDHELD_OBJECT = 278,
    SPECIAL = 279,
    BASE_COSMETIC = 281,
    EYEBROW_COSMETIC = 282,
    EYELASH = 283,
    COSMETIC_CONTACT_LENSES = 284,
    LIP_COSMETIC = 285,
    SKIN_COLOR = 286,
    ONE_PIECE_DRESS = 290,
    SWITCH_CLOTHES_SCENE = 291,
    QUEST = 301,
    CAST = 401,
    SWORD = 421,
    BOW_ARROW = 422,
    WANDS = 423,
    SPECIAL_TOOL = 424,
    FOOD = 403,
    TREASURE_BOX = 501,
    KEY = 502,
    MULTI_CHOOSE_TREASURE_BOX = 503,
    ACHIEVEMENT = 601,
    TITLE = 602,
    AVATAR_FRAME = 701,
    VOICE = 801,
    IDLE_POSE = 901,
    PHOTO_POSE = 902,
    BAG = 1001,
    FRIEND_CAPACITY = 1002,
    CONSTRUCTION_MATERIAL = 1101,
    DESIGN_DRAWING = 1102,
}
}



namespace item {
export enum EClothersStarQualityType {
    ONE = 1,
    TWO = 2,
    THREE = 3,
    FOUR = 4,
    FIVE = 5,
    SIX = 6,
    SEVEN = 7,
    EIGHT = 8,
    NINE = 9,
    TEN = 10,
}
}



namespace item {
export enum EClothersTag {
    FANG_SHAI = 1,
    WU_ZHE = 2,
}
}



namespace item {
export enum EUseType {
    MANUAL = 0,
    AUTO = 1,
}
}



namespace item {
export enum EClothesHidePartType {
    CHEST = 0,
    HEAD = 1,
    SPINE_UPPER = 2,
    SPINE_LOWER = 3,
    HIP = 4,
    LEG_UPPER = 5,
    LEG_MIDDLE = 6,
    LEG_LOWER = 7,
}
}



namespace item {
export enum EClothesPropertyType {
    JIAN_YUE = 1,
    HUA_LI = 2,
    KE_AI = 3,
    CHENG_SHU = 4,
    HUO_PO = 5,
    YOU_YA = 6,
    QING_CHUN = 7,
    XING_GAN = 8,
    QING_LIANG = 9,
    BAO_NUAN = 10,
}
}



namespace item {
export enum EItemFunctionType {
    REPLACE_HANDHELD = 0,
    USE_DESIGN_DRAWING = 1,
}
}



namespace limit {
export enum ENamespace {
    ITEM_DAILY_OBTAIN = 1,
    TREASURE_DAILY_USE = 2,
    STORE_GOODS_LIMIT_BUY = 3,
}
}



namespace mail {
export enum EMailType {
    GLOBAL = 0,
    SYSTEM = 1,
}
}



namespace role {
export enum EGenderType {
    MALE = 1,
    FEMALE = 2,
}
}



namespace role {
export enum EProfession {
    TEST_PROFESSION = 1,
}
}



namespace role {
export class Consts {
    static MAX_NAME_LENGTH = 20;
    static MAX_USER_ROLE_NUM = 10;
}
}






namespace ai {

export  class Blackboard  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.name = _buf_.ReadString();
        this.desc = _buf_.ReadString();
        this.parentName = _buf_.ReadString();
        { this.keys = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :ai.BlackboardKey;_e = new ai.BlackboardKey(_buf_);; this.keys.push(_e) } }
    }

     name : string;
     desc : string;
     parentName : string;
    parentName_Ref : ai.Blackboard;
     keys : ai.BlackboardKey[];

    resolve(_tables : Map<string, any>) : void {
            this.parentName_Ref = (_tables.get('ai.TbBlackboard') as ai.TbBlackboard).get(this.parentName);
            for(let _e of this.keys) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





namespace ai {

export  class BlackboardKey  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.name = _buf_.ReadString();
        this.desc = _buf_.ReadString();
        this.isStatic = _buf_.ReadBool();
        this.type = _buf_.ReadInt();
        this.typeClassName = _buf_.ReadString();
    }

     name : string;
     desc : string;
     isStatic : boolean;
     type : ai.EKeyType;
     typeClassName : string;

    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace ai {

export  class BehaviorTree  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.name = _buf_.ReadString();
        this.desc = _buf_.ReadString();
        this.blackboardId = _buf_.ReadString();
        this.root = ai.ComposeNode.deserialize(_buf_);
    }

     id : number;
     name : string;
     desc : string;
     blackboardId : string;
    blackboardId_Ref : ai.Blackboard;
     root? : ai.ComposeNode;

    resolve(_tables : Map<string, any>) : void {
            this.blackboardId_Ref = (_tables.get('ai.TbBlackboard') as ai.TbBlackboard).get(this.blackboardId);
            if (this.root != null) { this.root.resolve(_tables);}
    }
}

}





namespace ai {

export  abstract  class Node  {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : Node {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case 1812449155: return new ai.UeSetDefaultFocus(_buf_);
            case 990693812: return new ai.ExecuteTimeStatistic(_buf_);
            case 1601247918: return new ai.ChooseTarget(_buf_);
            case 1195270745: return new ai.KeepFaceTarget(_buf_);
            case -999247644: return new ai.GetOwnerPlayer(_buf_);
            case -61887372: return new ai.UpdateDailyBehaviorProps(_buf_);
            case -513308166: return new ai.UeLoop(_buf_);
            case -951439423: return new ai.UeCooldown(_buf_);
            case 338469720: return new ai.UeTimeLimit(_buf_);
            case -315297507: return new ai.UeBlackboard(_buf_);
            case 195054574: return new ai.UeForceSuccess(_buf_);
            case 1255972344: return new ai.IsAtLocation(_buf_);
            case -1207170283: return new ai.DistanceLessThan(_buf_);
            case -1789006105: return new ai.Sequence(_buf_);
            case -1946981627: return new ai.Selector(_buf_);
            case -1952582529: return new ai.SimpleParallel(_buf_);
            case -512994101: return new ai.UeWait(_buf_);
            case 1215378271: return new ai.UeWaitBlackboardTime(_buf_);
            case 514987779: return new ai.MoveToTarget(_buf_);
            case -918812268: return new ai.ChooseSkill(_buf_);
            case -2140042998: return new ai.MoveToRandomLocation(_buf_);
            case -969953113: return new ai.MoveToLocation(_buf_);
            case 1357409728: return new ai.DebugPrint(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.nodeName = _buf_.ReadString();
    }

     id : number;
     nodeName : string;

    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace ai {

export  abstract  class Service  extends ai.Node {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : Service {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case 1812449155: return new ai.UeSetDefaultFocus(_buf_);
            case 990693812: return new ai.ExecuteTimeStatistic(_buf_);
            case 1601247918: return new ai.ChooseTarget(_buf_);
            case 1195270745: return new ai.KeepFaceTarget(_buf_);
            case -999247644: return new ai.GetOwnerPlayer(_buf_);
            case -61887372: return new ai.UpdateDailyBehaviorProps(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
    }


    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class UeSetDefaultFocus  extends ai.Service {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.keyboardKey = _buf_.ReadString();
    }

     keyboardKey : string;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class ExecuteTimeStatistic  extends ai.Service {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
    }


    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class ChooseTarget  extends ai.Service {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.resultTargetKey = _buf_.ReadString();
    }

     resultTargetKey : string;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class KeepFaceTarget  extends ai.Service {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.targetActorKey = _buf_.ReadString();
    }

     targetActorKey : string;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class GetOwnerPlayer  extends ai.Service {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.playerActorKey = _buf_.ReadString();
    }

     playerActorKey : string;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class UpdateDailyBehaviorProps  extends ai.Service {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.satietyKey = _buf_.ReadString();
        this.energyKey = _buf_.ReadString();
        this.moodKey = _buf_.ReadString();
        this.satietyLowerThresholdKey = _buf_.ReadString();
        this.satietyUpperThresholdKey = _buf_.ReadString();
        this.energyLowerThresholdKey = _buf_.ReadString();
        this.energyUpperThresholdKey = _buf_.ReadString();
        this.moodLowerThresholdKey = _buf_.ReadString();
        this.moodUpperThresholdKey = _buf_.ReadString();
    }

     satietyKey : string;
     energyKey : string;
     moodKey : string;
     satietyLowerThresholdKey : string;
     satietyUpperThresholdKey : string;
     energyLowerThresholdKey : string;
     energyUpperThresholdKey : string;
     moodLowerThresholdKey : string;
     moodUpperThresholdKey : string;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  abstract  class Decorator  extends ai.Node {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : Decorator {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case -513308166: return new ai.UeLoop(_buf_);
            case -951439423: return new ai.UeCooldown(_buf_);
            case 338469720: return new ai.UeTimeLimit(_buf_);
            case -315297507: return new ai.UeBlackboard(_buf_);
            case 195054574: return new ai.UeForceSuccess(_buf_);
            case 1255972344: return new ai.IsAtLocation(_buf_);
            case -1207170283: return new ai.DistanceLessThan(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.flowAbortMode = _buf_.ReadInt();
    }

     flowAbortMode : ai.EFlowAbortMode;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class UeLoop  extends ai.Decorator {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.numLoops = _buf_.ReadInt();
        this.infiniteLoop = _buf_.ReadBool();
        this.infiniteLoopTimeoutTime = _buf_.ReadFloat();
    }

     numLoops : number;
     infiniteLoop : boolean;
     infiniteLoopTimeoutTime : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class UeCooldown  extends ai.Decorator {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.cooldownTime = _buf_.ReadFloat();
    }

     cooldownTime : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class UeTimeLimit  extends ai.Decorator {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.limitTime = _buf_.ReadFloat();
    }

     limitTime : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class UeBlackboard  extends ai.Decorator {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.notifyObserver = _buf_.ReadInt();
        this.blackboardKey = _buf_.ReadString();
        this.keyQuery = ai.KeyQueryOperator.deserialize(_buf_);
    }

     notifyObserver : ai.ENotifyObserverMode;
     blackboardKey : string;
     keyQuery? : ai.KeyQueryOperator;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            if (this.keyQuery != null) { this.keyQuery.resolve(_tables);}
    }
}

}





namespace ai {

export  abstract  class KeyQueryOperator  {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : KeyQueryOperator {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case 1635350898: return new ai.IsSet(_buf_);
            case 790736255: return new ai.IsNotSet(_buf_);
            case -979891605: return new ai.BinaryOperator(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
    }


    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace ai {

export  class IsSet  extends ai.KeyQueryOperator {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
    }


    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class IsNotSet  extends ai.KeyQueryOperator {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
    }


    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class BinaryOperator  extends ai.KeyQueryOperator {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.oper = _buf_.ReadInt();
        this.data = ai.KeyData.deserialize(_buf_);
    }

     oper : ai.EOperator;
     data? : ai.KeyData;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            if (this.data != null) { this.data.resolve(_tables);}
    }
}

}





namespace ai {

export  abstract  class KeyData  {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : KeyData {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case -719747885: return new ai.FloatKeyData(_buf_);
            case -342751904: return new ai.IntKeyData(_buf_);
            case -307888654: return new ai.StringKeyData(_buf_);
            case 1517269500: return new ai.BlackboardKeyData(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
    }


    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace ai {

export  class FloatKeyData  extends ai.KeyData {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.value = _buf_.ReadFloat();
    }

     value : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class IntKeyData  extends ai.KeyData {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.value = _buf_.ReadInt();
    }

     value : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class StringKeyData  extends ai.KeyData {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.value = _buf_.ReadString();
    }

     value : string;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class BlackboardKeyData  extends ai.KeyData {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.value = _buf_.ReadString();
    }

     value : string;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class UeForceSuccess  extends ai.Decorator {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
    }


    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class IsAtLocation  extends ai.Decorator {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.acceptableRadius = _buf_.ReadFloat();
        this.keyboardKey = _buf_.ReadString();
        this.inverseCondition = _buf_.ReadBool();
    }

     acceptableRadius : number;
     keyboardKey : string;
     inverseCondition : boolean;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class DistanceLessThan  extends ai.Decorator {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.actor1Key = _buf_.ReadString();
        this.actor2Key = _buf_.ReadString();
        this.distance = _buf_.ReadFloat();
        this.reverseResult = _buf_.ReadBool();
    }

     actor1Key : string;
     actor2Key : string;
     distance : number;
     reverseResult : boolean;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  abstract  class FlowNode  extends ai.Node {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : FlowNode {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case -1789006105: return new ai.Sequence(_buf_);
            case -1946981627: return new ai.Selector(_buf_);
            case -1952582529: return new ai.SimpleParallel(_buf_);
            case -512994101: return new ai.UeWait(_buf_);
            case 1215378271: return new ai.UeWaitBlackboardTime(_buf_);
            case 514987779: return new ai.MoveToTarget(_buf_);
            case -918812268: return new ai.ChooseSkill(_buf_);
            case -2140042998: return new ai.MoveToRandomLocation(_buf_);
            case -969953113: return new ai.MoveToLocation(_buf_);
            case 1357409728: return new ai.DebugPrint(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        { this.decorators = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :ai.Decorator;_e = ai.Decorator.deserialize(_buf_);; this.decorators.push(_e) } }
        { this.services = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :ai.Service;_e = ai.Service.deserialize(_buf_);; this.services.push(_e) } }
    }

     decorators : ai.Decorator[];
     services : ai.Service[];

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            for(let _e of this.decorators) { if (_e != null ) {_e.resolve(_tables);} }
            for(let _e of this.services) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





namespace ai {

export  abstract  class ComposeNode  extends ai.FlowNode {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : ComposeNode {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case -1789006105: return new ai.Sequence(_buf_);
            case -1946981627: return new ai.Selector(_buf_);
            case -1952582529: return new ai.SimpleParallel(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
    }


    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class Sequence  extends ai.ComposeNode {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        { this.children = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :ai.FlowNode;_e = ai.FlowNode.deserialize(_buf_);; this.children.push(_e) } }
    }

     children : ai.FlowNode[];

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            for(let _e of this.children) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





namespace ai {

export  class Selector  extends ai.ComposeNode {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        { this.children = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :ai.FlowNode;_e = ai.FlowNode.deserialize(_buf_);; this.children.push(_e) } }
    }

     children : ai.FlowNode[];

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            for(let _e of this.children) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





namespace ai {

export  class SimpleParallel  extends ai.ComposeNode {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.finishMode = _buf_.ReadInt();
        this.mainTask = ai.Task.deserialize(_buf_);
        this.backgroundNode = ai.FlowNode.deserialize(_buf_);
    }

     finishMode : ai.EFinishMode;
     mainTask? : ai.Task;
     backgroundNode? : ai.FlowNode;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            if (this.mainTask != null) { this.mainTask.resolve(_tables);}
            if (this.backgroundNode != null) { this.backgroundNode.resolve(_tables);}
    }
}

}





namespace ai {

export  abstract  class Task  extends ai.FlowNode {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : Task {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case -512994101: return new ai.UeWait(_buf_);
            case 1215378271: return new ai.UeWaitBlackboardTime(_buf_);
            case 514987779: return new ai.MoveToTarget(_buf_);
            case -918812268: return new ai.ChooseSkill(_buf_);
            case -2140042998: return new ai.MoveToRandomLocation(_buf_);
            case -969953113: return new ai.MoveToLocation(_buf_);
            case 1357409728: return new ai.DebugPrint(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.ignoreRestartSelf = _buf_.ReadBool();
    }

     ignoreRestartSelf : boolean;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class UeWait  extends ai.Task {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.waitTime = _buf_.ReadFloat();
        this.randomDeviation = _buf_.ReadFloat();
    }

     waitTime : number;
     randomDeviation : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class UeWaitBlackboardTime  extends ai.Task {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.blackboardKey = _buf_.ReadString();
    }

     blackboardKey : string;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class MoveToTarget  extends ai.Task {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.targetActorKey = _buf_.ReadString();
        this.acceptableRadius = _buf_.ReadFloat();
    }

     targetActorKey : string;
     acceptableRadius : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class ChooseSkill  extends ai.Task {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.targetActorKey = _buf_.ReadString();
        this.resultSkillIdKey = _buf_.ReadString();
    }

     targetActorKey : string;
     resultSkillIdKey : string;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class MoveToRandomLocation  extends ai.Task {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.originPositionKey = _buf_.ReadString();
        this.radius = _buf_.ReadFloat();
    }

     originPositionKey : string;
     radius : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class MoveToLocation  extends ai.Task {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.location = Vector3.from(_buf_)
        this.acceptableRadius = _buf_.ReadFloat();
    }

     location : Vector3;
     acceptableRadius : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace ai {

export  class DebugPrint  extends ai.Task {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.text = _buf_.ReadString();
    }

     text : string;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace blueprint {

export  abstract  class Clazz  {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : Clazz {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case 2114170750: return new blueprint.Interface(_buf_);
            case -2073576778: return new blueprint.NormalClazz(_buf_);
            case 1827364892: return new blueprint.EnumClazz(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.name = _buf_.ReadString();
        this.desc = _buf_.ReadString();
        { this.parents = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :blueprint.Clazz;_e = blueprint.Clazz.deserialize(_buf_);; this.parents.push(_e) } }
        { this.methods = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :blueprint.Method;_e = blueprint.Method.deserialize(_buf_);; this.methods.push(_e) } }
    }

     name : string;
     desc : string;
     parents : blueprint.Clazz[];
     methods : blueprint.Method[];

    resolve(_tables : Map<string, any>) : void {
            for(let _e of this.parents) { if (_e != null ) {_e.resolve(_tables);} }
            for(let _e of this.methods) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





namespace blueprint {

export  abstract  class Method  {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : Method {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case -392137809: return new blueprint.AbstraceMethod(_buf_);
            case 1739079015: return new blueprint.ExternalMethod(_buf_);
            case -696408103: return new blueprint.BlueprintMethod(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.name = _buf_.ReadString();
        this.desc = _buf_.ReadString();
        this.isStatic = _buf_.ReadBool();
        this.returnType = _buf_.ReadString();
        { this.parameters = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :blueprint.ParamInfo;_e = new blueprint.ParamInfo(_buf_);; this.parameters.push(_e) } }
    }

     name : string;
     desc : string;
     isStatic : boolean;
     returnType : string;
     parameters : blueprint.ParamInfo[];

    resolve(_tables : Map<string, any>) : void {
            for(let _e of this.parameters) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





namespace blueprint {

export  class ParamInfo  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.name = _buf_.ReadString();
        this.type = _buf_.ReadString();
        this.isRef = _buf_.ReadBool();
    }

     name : string;
     type : string;
     isRef : boolean;

    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace blueprint {

export  class AbstraceMethod  extends blueprint.Method {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
    }


    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace blueprint {

export  class ExternalMethod  extends blueprint.Method {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
    }


    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace blueprint {

export  class BlueprintMethod  extends blueprint.Method {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
    }


    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace blueprint {

export  class Interface  extends blueprint.Clazz {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
    }


    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace blueprint {

export  class NormalClazz  extends blueprint.Clazz {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.isAbstract = _buf_.ReadBool();
        { this.fields = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :blueprint.Field;_e = new blueprint.Field(_buf_);; this.fields.push(_e) } }
    }

     isAbstract : boolean;
     fields : blueprint.Field[];

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            for(let _e of this.fields) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





namespace blueprint {

export  class Field  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.name = _buf_.ReadString();
        this.type = _buf_.ReadString();
        this.desc = _buf_.ReadString();
    }

     name : string;
     type : string;
     desc : string;

    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace blueprint {

export  class EnumClazz  extends blueprint.Clazz {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        { this.enums = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :blueprint.EnumField;_e = new blueprint.EnumField(_buf_);; this.enums.push(_e) } }
    }

     enums : blueprint.EnumField[];

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            for(let _e of this.enums) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





namespace blueprint {

export  class EnumField  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.name = _buf_.ReadString();
        this.value = _buf_.ReadInt();
    }

     name : string;
     value : number;

    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace bonus {

export  class DropInfo  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.desc = _buf_.ReadString();
        { this.clientShowItems = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :bonus.ShowItemInfo;_e = new bonus.ShowItemInfo(_buf_);; this.clientShowItems.push(_e) } }
        this.bonus = bonus.Bonus.deserialize(_buf_);
    }

     id : number;
     desc : string;
     clientShowItems : bonus.ShowItemInfo[];
     bonus? : bonus.Bonus;

    resolve(_tables : Map<string, any>) : void {
            for(let _e of this.clientShowItems) { if (_e != null ) {_e.resolve(_tables);} }
            if (this.bonus != null) { this.bonus.resolve(_tables);}
    }
}

}





namespace bonus {

export  class ShowItemInfo  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.itemId = _buf_.ReadInt();
        this.itemNum = _buf_.ReadLong();
    }

     itemId : number;
    itemId_Ref : item.Item;
     itemNum : bigint;

    resolve(_tables : Map<string, any>) : void {
            this.itemId_Ref = (_tables.get('item.TbItem') as item.TbItem).get(this.itemId);
    }
}

}





namespace bonus {

export  abstract  class Bonus  {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : Bonus {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case -1649658966: return new bonus.OneItem(_buf_);
            case 400179721: return new bonus.OneItems(_buf_);
            case 1689011106: return new bonus.Item(_buf_);
            case 819736849: return new bonus.Items(_buf_);
            case -229470727: return new bonus.CoefficientItem(_buf_);
            case -356202311: return new bonus.WeightItems(_buf_);
            case 366387866: return new bonus.ProbabilityItems(_buf_);
            case 1421907893: return new bonus.MultiBonus(_buf_);
            case 359783161: return new bonus.ProbabilityBonus(_buf_);
            case -362807016: return new bonus.WeightBonus(_buf_);
            case 1959868225: return new bonus.DropBonus(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
    }


    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace bonus {

export  class OneItem  extends bonus.Bonus {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.itemId = _buf_.ReadInt();
    }

     itemId : number;
    itemId_Ref : item.Item;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            this.itemId_Ref = (_tables.get('item.TbItem') as item.TbItem).get(this.itemId);
    }
}

}





namespace bonus {

export  class OneItems  extends bonus.Bonus {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.items = new Int32Array(n); for(let i = 0 ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt();; this.items[i] = _e } }
    }

     items : Int32Array;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace bonus {

export  class Item  extends bonus.Bonus {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.itemId = _buf_.ReadInt();
        this.amount = _buf_.ReadInt();
    }

     itemId : number;
    itemId_Ref : item.Item;
     amount : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            this.itemId_Ref = (_tables.get('item.TbItem') as item.TbItem).get(this.itemId);
    }
}

}





namespace bonus {

export  class Items  extends bonus.Bonus {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.itemList = []; for(let i = 0 ; i < n ; i++) { let _e :bonus.Item;_e = new bonus.Item(_buf_);; this.itemList.push(_e) } }
    }

     itemList : bonus.Item[];

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            for(let _e of this.itemList) { if (_e != null) { _e.resolve(_tables); } }
    }
}

}





namespace bonus {

export  class CoefficientItem  extends bonus.Bonus {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.bonusId = _buf_.ReadInt();
        this.bonusList = new bonus.Items(_buf_);
    }

     bonusId : number;
     bonusList : bonus.Items;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            if (this.bonusList != null) { this.bonusList.resolve(_tables);}
    }
}

}





namespace bonus {

export  class WeightItems  extends bonus.Bonus {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.itemList = []; for(let i = 0 ; i < n ; i++) { let _e :bonus.WeightItemInfo;_e = new bonus.WeightItemInfo(_buf_);; this.itemList.push(_e) } }
    }

     itemList : bonus.WeightItemInfo[];

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            for(let _e of this.itemList) { if (_e != null) { _e.resolve(_tables); } }
    }
}

}





namespace bonus {

export  class WeightItemInfo  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.itemId = _buf_.ReadInt();
        this.num = _buf_.ReadInt();
        this.weight = _buf_.ReadInt();
    }

     itemId : number;
    itemId_Ref : item.Item;
     num : number;
     weight : number;

    resolve(_tables : Map<string, any>) : void {
            this.itemId_Ref = (_tables.get('item.TbItem') as item.TbItem).get(this.itemId);
    }
}

}





namespace bonus {

export  class ProbabilityItems  extends bonus.Bonus {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.itemList = []; for(let i = 0 ; i < n ; i++) { let _e :bonus.ProbabilityItemInfo;_e = new bonus.ProbabilityItemInfo(_buf_);; this.itemList.push(_e) } }
    }

     itemList : bonus.ProbabilityItemInfo[];

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            for(let _e of this.itemList) { if (_e != null) { _e.resolve(_tables); } }
    }
}

}





namespace bonus {

export  class ProbabilityItemInfo  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.itemId = _buf_.ReadInt();
        this.num = _buf_.ReadInt();
        this.probability = _buf_.ReadFloat();
    }

     itemId : number;
    itemId_Ref : item.Item;
     num : number;
     probability : number;

    resolve(_tables : Map<string, any>) : void {
            this.itemId_Ref = (_tables.get('item.TbItem') as item.TbItem).get(this.itemId);
    }
}

}





namespace bonus {

export  class MultiBonus  extends bonus.Bonus {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.bonuses = []; for(let i = 0 ; i < n ; i++) { let _e :bonus.Bonus;_e = bonus.Bonus.deserialize(_buf_);; this.bonuses.push(_e) } }
    }

     bonuses : bonus.Bonus[];

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            for(let _e of this.bonuses) { if (_e != null) { _e.resolve(_tables); } }
    }
}

}





namespace bonus {

export  class ProbabilityBonus  extends bonus.Bonus {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.bonuses = []; for(let i = 0 ; i < n ; i++) { let _e :bonus.ProbabilityBonusInfo;_e = new bonus.ProbabilityBonusInfo(_buf_);; this.bonuses.push(_e) } }
    }

     bonuses : bonus.ProbabilityBonusInfo[];

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            for(let _e of this.bonuses) { if (_e != null) { _e.resolve(_tables); } }
    }
}

}





namespace bonus {

export  class ProbabilityBonusInfo  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.bonus = bonus.Bonus.deserialize(_buf_);
        this.probability = _buf_.ReadFloat();
    }

     bonus? : bonus.Bonus;
     probability : number;

    resolve(_tables : Map<string, any>) : void {
            if (this.bonus != null) { this.bonus.resolve(_tables);}
    }
}

}





namespace bonus {

export  class WeightBonus  extends bonus.Bonus {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.bonuses = []; for(let i = 0 ; i < n ; i++) { let _e :bonus.WeightBonusInfo;_e = new bonus.WeightBonusInfo(_buf_);; this.bonuses.push(_e) } }
    }

     bonuses : bonus.WeightBonusInfo[];

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            for(let _e of this.bonuses) { if (_e != null) { _e.resolve(_tables); } }
    }
}

}





namespace bonus {

export  class WeightBonusInfo  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.bonus = bonus.Bonus.deserialize(_buf_);
        this.weight = _buf_.ReadInt();
    }

     bonus? : bonus.Bonus;
     weight : number;

    resolve(_tables : Map<string, any>) : void {
            if (this.bonus != null) { this.bonus.resolve(_tables);}
    }
}

}





namespace bonus {

export  class DropBonus  extends bonus.Bonus {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.id = _buf_.ReadInt();
    }

     id : number;
    id_Ref : bonus.DropInfo;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            this.id_Ref = (_tables.get('bonus.TbDrop') as bonus.TbDrop).get(this.id);
    }
}

}





namespace common {

export  class GlobalConfig  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.bagCapacity = _buf_.ReadInt();
        this.bagCapacitySpecial = _buf_.ReadInt();
        this.bagTempExpendableCapacity = _buf_.ReadInt();
        this.bagTempToolCapacity = _buf_.ReadInt();
        this.bagInitCapacity = _buf_.ReadInt();
        this.quickBagCapacity = _buf_.ReadInt();
        this.clothBagCapacity = _buf_.ReadInt();
        this.clothBagInitCapacity = _buf_.ReadInt();
        this.clothBagCapacitySpecial = _buf_.ReadInt();
        if(_buf_.ReadBool()) { this.bagInitItemsDropId = _buf_.ReadInt(); } else { this.bagInitItemsDropId = null; }
        this.mailBoxCapacity = _buf_.ReadInt();
        this.damageParamC = _buf_.ReadFloat();
        this.damageParamE = _buf_.ReadFloat();
        this.damageParamF = _buf_.ReadFloat();
        this.damageParamD = _buf_.ReadFloat();
        this.roleSpeed = _buf_.ReadFloat();
        this.monsterSpeed = _buf_.ReadFloat();
        this.initEnergy = _buf_.ReadInt();
        this.initViality = _buf_.ReadInt();
        this.maxViality = _buf_.ReadInt();
        this.perVialityRecoveryTime = _buf_.ReadInt();
    }

     bagCapacity : number;
     bagCapacitySpecial : number;
     bagTempExpendableCapacity : number;
     bagTempToolCapacity : number;
     bagInitCapacity : number;
     quickBagCapacity : number;
     clothBagCapacity : number;
     clothBagInitCapacity : number;
     clothBagCapacitySpecial : number;
     bagInitItemsDropId? : number;
    bagInitItemsDropId_Ref : bonus.DropInfo;
     mailBoxCapacity : number;
     damageParamC : number;
     damageParamE : number;
     damageParamF : number;
     damageParamD : number;
     roleSpeed : number;
     monsterSpeed : number;
     initEnergy : number;
     initViality : number;
     maxViality : number;
     perVialityRecoveryTime : number;

    resolve(_tables : Map<string, any>) : void {
            this.bagInitItemsDropId_Ref = this.bagInitItemsDropId != null ? (_tables.get('bonus.TbDrop') as  bonus.TbDrop).get(this.bagInitItemsDropId) : null;
    }
}

}





namespace common {

export  class Dummy  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.limit = limit.LimitBase.deserialize(_buf_);
    }

     id : number;
     limit? : limit.LimitBase;

    resolve(_tables : Map<string, any>) : void {
            if (this.limit != null) { this.limit.resolve(_tables);}
    }
}

}





namespace limit {

export  abstract  class LimitBase  {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : LimitBase {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case 303235413: return new limit.DailyLimit(_buf_);
            case -1753629499: return new limit.MultiDayLimit(_buf_);
            case -252187161: return new limit.WeeklyLimit(_buf_);
            case 2063279905: return new limit.MonthlyLimit(_buf_);
            case -1366194050: return new limit.CoolDown(_buf_);
            case 394328599: return new limit.GroupCoolDown(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
    }


    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace limit {

export  abstract  class DailyLimitBase  extends limit.LimitBase {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : DailyLimitBase {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case 303235413: return new limit.DailyLimit(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
    }


    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace limit {

export  class DailyLimit  extends limit.DailyLimitBase {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.num = _buf_.ReadInt();
    }

     num : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace limit {

export  class MultiDayLimit  extends limit.LimitBase {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.day = _buf_.ReadInt();
        this.num = _buf_.ReadInt();
    }

     day : number;
     num : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace limit {

export  class WeeklyLimit  extends limit.LimitBase {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.num = _buf_.ReadInt();
    }

     num : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace limit {

export  class MonthlyLimit  extends limit.LimitBase {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.num = _buf_.ReadInt();
    }

     num : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace limit {

export  class CoolDown  extends limit.LimitBase {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.duration = _buf_.ReadInt();
    }

     duration : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace limit {

export  class GroupCoolDown  extends limit.LimitBase {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.groupId = _buf_.ReadInt();
        this.duration = _buf_.ReadInt();
    }

     groupId : number;
     duration : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace error {

export  class ErrorInfo  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.code = _buf_.ReadString();
        this.desc = _buf_.ReadString();
        this.style = error.ErrorStyle.deserialize(_buf_);
    }

     code : string;
     desc : string;
     style? : error.ErrorStyle;

    resolve(_tables : Map<string, any>) : void {
            if (this.style != null) { this.style.resolve(_tables);}
    }
}

}





namespace error {

export  abstract  class ErrorStyle  {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : ErrorStyle {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case 1915239884: return new error.ErrorStyleTip(_buf_);
            case -1920482343: return new error.ErrorStyleMsgbox(_buf_);
            case -2010134516: return new error.ErrorStyleDlgOk(_buf_);
            case 971221414: return new error.ErrorStyleDlgOkCancel(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
    }


    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace error {

export  class ErrorStyleTip  extends error.ErrorStyle {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
    }


    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace error {

export  class ErrorStyleMsgbox  extends error.ErrorStyle {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.btnName = _buf_.ReadString();
        this.operation = _buf_.ReadInt();
    }

     btnName : string;
     operation : error.EOperation;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace error {

export  class ErrorStyleDlgOk  extends error.ErrorStyle {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.btnName = _buf_.ReadString();
    }

     btnName : string;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace error {

export  class ErrorStyleDlgOkCancel  extends error.ErrorStyle {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.btn1Name = _buf_.ReadString();
        this.btn2Name = _buf_.ReadString();
    }

     btn1Name : string;
     btn2Name : string;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace error {

export  class CodeInfo  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.code = _buf_.ReadInt();
        this.key = _buf_.ReadString();
    }

     code : error.EErrorCode;
     key : string;

    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace item {

export  class Item  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.name = _buf_.ReadString();
        this.majorType = _buf_.ReadInt();
        this.minorType = _buf_.ReadInt();
        this.maxPileNum = _buf_.ReadInt();
        this.quality = _buf_.ReadInt();
        this.icon = _buf_.ReadString();
        this.iconBackgroud = _buf_.ReadString();
        this.iconMask = _buf_.ReadString();
        this.desc = _buf_.ReadString();
        this.showOrder = _buf_.ReadInt();
        this.quantifier = _buf_.ReadString();
        this.showInBag = _buf_.ReadBool();
        this.minShowLevel = _buf_.ReadInt();
        this.batchUsable = _buf_.ReadBool();
        this.progressTimeWhenUse = _buf_.ReadFloat();
        this.showHintWhenUse = _buf_.ReadBool();
        this.droppable = _buf_.ReadBool();
        if(_buf_.ReadBool()) { this.price = _buf_.ReadInt(); } else { this.price = null; }
        this.useType = _buf_.ReadInt();
        if(_buf_.ReadBool()) { this.levelUpId = _buf_.ReadInt(); } else { this.levelUpId = null; }
    }

     id : number;
     name : string;
     majorType : item.EMajorType;
     minorType : item.EMinorType;
     maxPileNum : number;
     quality : item.EItemQuality;
     icon : string;
     iconBackgroud : string;
     iconMask : string;
     desc : string;
     showOrder : number;
     quantifier : string;
     showInBag : boolean;
     minShowLevel : number;
     batchUsable : boolean;
     progressTimeWhenUse : number;
     showHintWhenUse : boolean;
     droppable : boolean;
     price? : number;
     useType : item.EUseType;
     levelUpId? : number;

    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace item {

export  class ItemFunction  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.minorType = _buf_.ReadInt();
        this.funcType = _buf_.ReadInt();
        this.method = _buf_.ReadString();
        this.closeBagUi = _buf_.ReadBool();
    }

     minorType : item.EMinorType;
     funcType : item.EItemFunctionType;
     method : string;
     closeBagUi : boolean;

    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace item {

export  abstract  class ItemExtra  {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : ItemExtra {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case 1494222369: return new item.TreasureBox(_buf_);
            case 640937802: return new item.InteractionItem(_buf_);
            case 1659907149: return new item.Clothes(_buf_);
            case -1679179579: return new item.DesignDrawing(_buf_);
            case 896889705: return new item.Dymmy(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
    }

     id : number;

    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace item {

export  class TreasureBox  extends item.ItemExtra {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        if(_buf_.ReadBool()) { this.keyItemId = _buf_.ReadInt(); } else { this.keyItemId = null; }
        this.openLevel = new condition.MinLevel(_buf_);
        this.useOnObtain = _buf_.ReadBool();
        { this.dropIds = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt();; this.dropIds.push(_e) } }
        { this.chooseList = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :item.ChooseOneBonus;_e = new item.ChooseOneBonus(_buf_);; this.chooseList.push(_e) } }
    }

     keyItemId? : number;
     openLevel : condition.MinLevel;
     useOnObtain : boolean;
     dropIds : number[];
     chooseList : item.ChooseOneBonus[];

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            if (this.openLevel != null) { this.openLevel.resolve(_tables);}
            for(let _e of this.chooseList) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





namespace condition {

export  abstract  class Condition  {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : Condition {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case 1069033789: return new condition.TimeRange(_buf_);
            case 934079583: return new condition.MultiRoleCondition(_buf_);
            case 103675143: return new condition.GenderLimit(_buf_);
            case -1075273755: return new condition.MinLevel(_buf_);
            case 700922899: return new condition.MaxLevel(_buf_);
            case 907499647: return new condition.MinMaxLevel(_buf_);
            case 696630835: return new condition.ClothesPropertyScoreGreaterThan(_buf_);
            case 1961145317: return new condition.ContainsItem(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
    }


    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace condition {

export  class TimeRange  extends condition.Condition {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.dateTimeRange = new common.DateTimeRange(_buf_);
    }

     dateTimeRange : common.DateTimeRange;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            if (this.dateTimeRange != null) { this.dateTimeRange.resolve(_tables);}
    }
}

}





namespace common {

export  class DateTimeRange  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        if(_buf_.ReadBool()) { this.startTime = _buf_.ReadInt(); } else { this.startTime = null; }
        if(_buf_.ReadBool()) { this.endTime = _buf_.ReadInt(); } else { this.endTime = null; }
    }

     startTime? : number;
     endTime? : number;

    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace condition {

export  abstract  class RoleCondition  extends condition.Condition {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : RoleCondition {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case 934079583: return new condition.MultiRoleCondition(_buf_);
            case 103675143: return new condition.GenderLimit(_buf_);
            case -1075273755: return new condition.MinLevel(_buf_);
            case 700922899: return new condition.MaxLevel(_buf_);
            case 907499647: return new condition.MinMaxLevel(_buf_);
            case 696630835: return new condition.ClothesPropertyScoreGreaterThan(_buf_);
            case 1961145317: return new condition.ContainsItem(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
    }


    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace condition {

export  class MultiRoleCondition  extends condition.RoleCondition {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.conditions = []; for(let i = 0 ; i < n ; i++) { let _e :condition.RoleCondition;_e = condition.RoleCondition.deserialize(_buf_);; this.conditions.push(_e) } }
    }

     conditions : condition.RoleCondition[];

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            for(let _e of this.conditions) { if (_e != null) { _e.resolve(_tables); } }
    }
}

}





namespace condition {

export  abstract  class BoolRoleCondition  extends condition.RoleCondition {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : BoolRoleCondition {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case 103675143: return new condition.GenderLimit(_buf_);
            case -1075273755: return new condition.MinLevel(_buf_);
            case 700922899: return new condition.MaxLevel(_buf_);
            case 907499647: return new condition.MinMaxLevel(_buf_);
            case 696630835: return new condition.ClothesPropertyScoreGreaterThan(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
    }


    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace condition {

export  class GenderLimit  extends condition.BoolRoleCondition {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.gender = _buf_.ReadInt();
    }

     gender : role.EGenderType;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace condition {

export  class MinLevel  extends condition.BoolRoleCondition {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.level = _buf_.ReadInt();
    }

     level : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace condition {

export  class MaxLevel  extends condition.BoolRoleCondition {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.level = _buf_.ReadInt();
    }

     level : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace condition {

export  class MinMaxLevel  extends condition.BoolRoleCondition {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.min = _buf_.ReadInt();
        this.max = _buf_.ReadInt();
    }

     min : number;
     max : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace condition {

export  class ClothesPropertyScoreGreaterThan  extends condition.BoolRoleCondition {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.prop = _buf_.ReadInt();
        this.value = _buf_.ReadInt();
    }

     prop : item.EClothesPropertyType;
     value : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace condition {

export  class ContainsItem  extends condition.RoleCondition {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.itemId = _buf_.ReadInt();
        this.num = _buf_.ReadInt();
        this.reverse = _buf_.ReadBool();
    }

     itemId : number;
    itemId_Ref : item.Item;
     num : number;
     reverse : boolean;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            this.itemId_Ref = (_tables.get('item.TbItem') as item.TbItem).get(this.itemId);
    }
}

}





namespace item {

export  class ChooseOneBonus  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.dropId = _buf_.ReadInt();
        this.isUnique = _buf_.ReadBool();
    }

     dropId : number;
    dropId_Ref : bonus.DropInfo;
     isUnique : boolean;

    resolve(_tables : Map<string, any>) : void {
            this.dropId_Ref = (_tables.get('bonus.TbDrop') as bonus.TbDrop).get(this.dropId);
    }
}

}





namespace item {

export  class InteractionItem  extends item.ItemExtra {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        if(_buf_.ReadBool()) { this.attackNum = _buf_.ReadInt(); } else { this.attackNum = null; }
        this.holdingStaticMesh = _buf_.ReadString();
        this.holdingStaticMeshMat = _buf_.ReadString();
    }

     attackNum? : number;
     holdingStaticMesh : string;
     holdingStaticMeshMat : string;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace item {

export  class Clothes  extends item.ItemExtra {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.attack = _buf_.ReadInt();
        this.hp = _buf_.ReadLong();
        this.energyLimit = _buf_.ReadInt();
        this.energyResume = _buf_.ReadInt();
    }

     attack : number;
     hp : bigint;
     energyLimit : number;
     energyResume : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace item {

export  class DesignDrawing  extends item.ItemExtra {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        { this.learnComponentId = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt();; this.learnComponentId.push(_e) } }
    }

     learnComponentId : number[];

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace item {

export  class Dymmy  extends item.ItemExtra {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.cost = cost.Cost.deserialize(_buf_);
    }

     cost? : cost.Cost;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            if (this.cost != null) { this.cost.resolve(_tables);}
    }
}

}





namespace cost {

export  abstract  class Cost  {
    static deserialize(_buf_ : Bright.Serialization.ByteBuf) : Cost {
        switch (_buf_.ReadInt())
        {
            case 0 : return null;
            case 911838111: return new cost.CostCurrency(_buf_);
            case 103084157: return new cost.CostCurrencies(_buf_);
            case -1033587381: return new cost.CostOneItem(_buf_);
            case -1249440351: return new cost.CostItem(_buf_);
            case -77945102: return new cost.CostItems(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
    }


    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace cost {

export  class CostCurrency  extends cost.Cost {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.type = _buf_.ReadInt();
        this.num = _buf_.ReadInt();
    }

     type : item.ECurrencyType;
     num : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
    }
}

}





namespace cost {

export  class CostCurrencies  extends cost.Cost {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        { this.currencies = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :cost.CostCurrency;_e = new cost.CostCurrency(_buf_);; this.currencies.push(_e) } }
    }

     currencies : cost.CostCurrency[];

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            for(let _e of this.currencies) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





namespace cost {

export  class CostOneItem  extends cost.Cost {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.itemId = _buf_.ReadInt();
    }

     itemId : number;
    itemId_Ref : item.Item;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            this.itemId_Ref = (_tables.get('item.TbItem') as item.TbItem).get(this.itemId);
    }
}

}





namespace cost {

export  class CostItem  extends cost.Cost {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        this.itemId = _buf_.ReadInt();
        this.amount = _buf_.ReadInt();
    }

     itemId : number;
    itemId_Ref : item.Item;
     amount : number;

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            this.itemId_Ref = (_tables.get('item.TbItem') as item.TbItem).get(this.itemId);
    }
}

}





namespace cost {

export  class CostItems  extends cost.Cost {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        super(_buf_);
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.itemList = []; for(let i = 0 ; i < n ; i++) { let _e :cost.CostItem;_e = new cost.CostItem(_buf_);; this.itemList.push(_e) } }
    }

     itemList : cost.CostItem[];

    resolve(_tables : Map<string, any>) : void {
        super.resolve(_tables);
            for(let _e of this.itemList) { if (_e != null) { _e.resolve(_tables); } }
    }
}

}





namespace mail {

export  class SystemMail  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.title = _buf_.ReadString();
        this.sender = _buf_.ReadString();
        this.content = _buf_.ReadString();
        { this.award = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt();; this.award.push(_e) } }
    }

     id : number;
     title : string;
     sender : string;
     content : string;
     award : number[];

    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace mail {

export  class GlobalMail  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        this.title = _buf_.ReadString();
        this.sender = _buf_.ReadString();
        this.content = _buf_.ReadString();
        { this.award = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt();; this.award.push(_e) } }
        this.allServer = _buf_.ReadBool();
        { this.serverList = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt();; this.serverList.push(_e) } }
        this.platform = _buf_.ReadString();
        this.channel = _buf_.ReadString();
        this.minMaxLevel = new condition.MinMaxLevel(_buf_);
        this.registerTime = new condition.TimeRange(_buf_);
        this.mailTime = new condition.TimeRange(_buf_);
    }

     id : number;
     title : string;
     sender : string;
     content : string;
     award : number[];
     allServer : boolean;
     serverList : number[];
     platform : string;
     channel : string;
     minMaxLevel : condition.MinMaxLevel;
     registerTime : condition.TimeRange;
     mailTime : condition.TimeRange;

    resolve(_tables : Map<string, any>) : void {
            if (this.minMaxLevel != null) { this.minMaxLevel.resolve(_tables);}
            if (this.registerTime != null) { this.registerTime.resolve(_tables);}
            if (this.mailTime != null) { this.mailTime.resolve(_tables);}
    }
}

}





namespace role {

export  class LevelExpAttr  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.level = _buf_.ReadInt();
        this.needExp = _buf_.ReadLong();
        { this.clothesAttrs = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :number;_e = _buf_.ReadInt();; this.clothesAttrs.push(_e) } }
    }

     level : number;
     needExp : bigint;
     clothesAttrs : number[];

    resolve(_tables : Map<string, any>) : void {
    }
}

}





namespace role {

export  class LevelBonus  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.id = _buf_.ReadInt();
        { this.distinctBonusInfos = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :role.DistinctBonusInfos;_e = new role.DistinctBonusInfos(_buf_);; this.distinctBonusInfos.push(_e) } }
    }

     id : number;
     distinctBonusInfos : role.DistinctBonusInfos[];

    resolve(_tables : Map<string, any>) : void {
            for(let _e of this.distinctBonusInfos) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





namespace role {

export  class DistinctBonusInfos  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.effectiveLevel = _buf_.ReadInt();
        { this.bonusInfo = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :role.BonusInfo;_e = new role.BonusInfo(_buf_);; this.bonusInfo.push(_e) } }
    }

     effectiveLevel : number;
     bonusInfo : role.BonusInfo[];

    resolve(_tables : Map<string, any>) : void {
            for(let _e of this.bonusInfo) { if (_e != null ) {_e.resolve(_tables);} }
    }
}

}





namespace role {

export  class BonusInfo  {

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this.type = _buf_.ReadInt();
        this.coefficient = _buf_.ReadFloat();
    }

     type : item.ECurrencyType;
     coefficient : number;

    resolve(_tables : Map<string, any>) : void {
    }
}

}


   
namespace ai {
export class TbBlackboard{
    private _dataMap : Map<string, ai.Blackboard>;
    private _dataList : ai.Blackboard[];
    
    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<string, ai.Blackboard>();
        this._dataList = [];
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v : ai.Blackboard;
            _v = new ai.Blackboard(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.name, _v);
        }
    }

    getDataMap() : Map<string, ai.Blackboard> { return this._dataMap; }
    getDataList() : ai.Blackboard[] { return this._dataList; }

    get(key : string) : ai.Blackboard  { return this._dataMap.get(key); }

    resolve(_tables : Map<string, any>) : void {
        for(var v of this._dataList) {
            v.resolve(_tables);
        }
    }


}
}


   
namespace ai {
export class TbBehaviorTree{
    private _dataMap : Map<number, ai.BehaviorTree>;
    private _dataList : ai.BehaviorTree[];
    
    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, ai.BehaviorTree>();
        this._dataList = [];
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v : ai.BehaviorTree;
            _v = new ai.BehaviorTree(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() : Map<number, ai.BehaviorTree> { return this._dataMap; }
    getDataList() : ai.BehaviorTree[] { return this._dataList; }

    get(key : number) : ai.BehaviorTree  { return this._dataMap.get(key); }

    resolve(_tables : Map<string, any>) : void {
        for(var v of this._dataList) {
            v.resolve(_tables);
        }
    }


}
}


   
namespace blueprint {
export class TbClazz{
    private _dataMap : Map<string, blueprint.Clazz>;
    private _dataList : blueprint.Clazz[];
    
    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<string, blueprint.Clazz>();
        this._dataList = [];
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v : blueprint.Clazz;
            _v = blueprint.Clazz.deserialize(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.name, _v);
        }
    }

    getDataMap() : Map<string, blueprint.Clazz> { return this._dataMap; }
    getDataList() : blueprint.Clazz[] { return this._dataList; }

    get(key : string) : blueprint.Clazz  { return this._dataMap.get(key); }

    resolve(_tables : Map<string, any>) : void {
        for(var v of this._dataList) {
            v.resolve(_tables);
        }
    }


}
}


   
namespace bonus {
export class TbDrop{
    private _dataMap : Map<number, bonus.DropInfo>;
    private _dataList : bonus.DropInfo[];
    
    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, bonus.DropInfo>();
        this._dataList = [];
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v : bonus.DropInfo;
            _v = new bonus.DropInfo(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() : Map<number, bonus.DropInfo> { return this._dataMap; }
    getDataList() : bonus.DropInfo[] { return this._dataList; }

    get(key : number) : bonus.DropInfo  { return this._dataMap.get(key); }

    resolve(_tables : Map<string, any>) : void {
        for(var v of this._dataList) {
            v.resolve(_tables);
        }
    }


}
}


   
namespace common {
export class TbGlobalConfig{

     private _data : common.GlobalConfig;

    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        if (_buf_.ReadInt() != 1) throw new Error('table mode=one, but size != 1');
        this._data = new common.GlobalConfig(_buf_);
    }

    getData() : common.GlobalConfig { return this._data; }

     get  bagCapacity() : number { return this._data.bagCapacity; }
     get  bagCapacitySpecial() : number { return this._data.bagCapacitySpecial; }
     get  bagTempExpendableCapacity() : number { return this._data.bagTempExpendableCapacity; }
     get  bagTempToolCapacity() : number { return this._data.bagTempToolCapacity; }
     get  bagInitCapacity() : number { return this._data.bagInitCapacity; }
     get  quickBagCapacity() : number { return this._data.quickBagCapacity; }
     get  clothBagCapacity() : number { return this._data.clothBagCapacity; }
     get  clothBagInitCapacity() : number { return this._data.clothBagInitCapacity; }
     get  clothBagCapacitySpecial() : number { return this._data.clothBagCapacitySpecial; }
     get  bagInitItemsDropId() : number { return this._data.bagInitItemsDropId; }
     get  mailBoxCapacity() : number { return this._data.mailBoxCapacity; }
     get  damageParamC() : number { return this._data.damageParamC; }
     get  damageParamE() : number { return this._data.damageParamE; }
     get  damageParamF() : number { return this._data.damageParamF; }
     get  damageParamD() : number { return this._data.damageParamD; }
     get  roleSpeed() : number { return this._data.roleSpeed; }
     get  monsterSpeed() : number { return this._data.monsterSpeed; }
     get  initEnergy() : number { return this._data.initEnergy; }
     get  initViality() : number { return this._data.initViality; }
     get  maxViality() : number { return this._data.maxViality; }
     get  perVialityRecoveryTime() : number { return this._data.perVialityRecoveryTime; }

    resolve(_tables : Map<string, any>) : void {
        this._data.resolve(_tables);
    }

    
}
}


   
namespace common {
export class TbDummy{
    private _dataMap : Map<number, common.Dummy>;
    private _dataList : common.Dummy[];
    
    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, common.Dummy>();
        this._dataList = [];
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v : common.Dummy;
            _v = new common.Dummy(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() : Map<number, common.Dummy> { return this._dataMap; }
    getDataList() : common.Dummy[] { return this._dataList; }

    get(key : number) : common.Dummy  { return this._dataMap.get(key); }

    resolve(_tables : Map<string, any>) : void {
        for(var v of this._dataList) {
            v.resolve(_tables);
        }
    }


}
}


   
namespace error {
export class TbErrorInfo{
    private _dataMap : Map<string, error.ErrorInfo>;
    private _dataList : error.ErrorInfo[];
    
    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<string, error.ErrorInfo>();
        this._dataList = [];
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v : error.ErrorInfo;
            _v = new error.ErrorInfo(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.code, _v);
        }
    }

    getDataMap() : Map<string, error.ErrorInfo> { return this._dataMap; }
    getDataList() : error.ErrorInfo[] { return this._dataList; }

    get(key : string) : error.ErrorInfo  { return this._dataMap.get(key); }

    resolve(_tables : Map<string, any>) : void {
        for(var v of this._dataList) {
            v.resolve(_tables);
        }
    }


}
}


   
namespace error {
export class TbCodeInfo{
    private _dataMap : Map<error.EErrorCode, error.CodeInfo>;
    private _dataList : error.CodeInfo[];
    
    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<error.EErrorCode, error.CodeInfo>();
        this._dataList = [];
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v : error.CodeInfo;
            _v = new error.CodeInfo(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.code, _v);
        }
    }

    getDataMap() : Map<error.EErrorCode, error.CodeInfo> { return this._dataMap; }
    getDataList() : error.CodeInfo[] { return this._dataList; }

    get(key : error.EErrorCode) : error.CodeInfo  { return this._dataMap.get(key); }

    resolve(_tables : Map<string, any>) : void {
        for(var v of this._dataList) {
            v.resolve(_tables);
        }
    }


}
}


   
namespace item {
export class TbItem{
    private _dataMap : Map<number, item.Item>;
    private _dataList : item.Item[];
    
    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, item.Item>();
        this._dataList = [];
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v : item.Item;
            _v = new item.Item(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() : Map<number, item.Item> { return this._dataMap; }
    getDataList() : item.Item[] { return this._dataList; }

    get(key : number) : item.Item  { return this._dataMap.get(key); }

    resolve(_tables : Map<string, any>) : void {
        for(var v of this._dataList) {
            v.resolve(_tables);
        }
    }


}
}


   
namespace item {
export class TbItemFunc{
    private _dataMap : Map<item.EMinorType, item.ItemFunction>;
    private _dataList : item.ItemFunction[];
    
    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<item.EMinorType, item.ItemFunction>();
        this._dataList = [];
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v : item.ItemFunction;
            _v = new item.ItemFunction(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.minorType, _v);
        }
    }

    getDataMap() : Map<item.EMinorType, item.ItemFunction> { return this._dataMap; }
    getDataList() : item.ItemFunction[] { return this._dataList; }

    get(key : item.EMinorType) : item.ItemFunction  { return this._dataMap.get(key); }

    resolve(_tables : Map<string, any>) : void {
        for(var v of this._dataList) {
            v.resolve(_tables);
        }
    }


}
}


   
namespace item {
export class TbItemExtra{
    private _dataMap : Map<number, item.ItemExtra>;
    private _dataList : item.ItemExtra[];
    
    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, item.ItemExtra>();
        this._dataList = [];
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v : item.ItemExtra;
            _v = item.ItemExtra.deserialize(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() : Map<number, item.ItemExtra> { return this._dataMap; }
    getDataList() : item.ItemExtra[] { return this._dataList; }

    get(key : number) : item.ItemExtra  { return this._dataMap.get(key); }

    resolve(_tables : Map<string, any>) : void {
        for(var v of this._dataList) {
            v.resolve(_tables);
        }
    }


}
}


   
namespace mail {
export class TbSystemMail{
    private _dataMap : Map<number, mail.SystemMail>;
    private _dataList : mail.SystemMail[];
    
    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, mail.SystemMail>();
        this._dataList = [];
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v : mail.SystemMail;
            _v = new mail.SystemMail(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() : Map<number, mail.SystemMail> { return this._dataMap; }
    getDataList() : mail.SystemMail[] { return this._dataList; }

    get(key : number) : mail.SystemMail  { return this._dataMap.get(key); }

    resolve(_tables : Map<string, any>) : void {
        for(var v of this._dataList) {
            v.resolve(_tables);
        }
    }


}
}


   
namespace mail {
export class TbGlobalMail{
    private _dataMap : Map<number, mail.GlobalMail>;
    private _dataList : mail.GlobalMail[];
    
    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, mail.GlobalMail>();
        this._dataList = [];
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v : mail.GlobalMail;
            _v = new mail.GlobalMail(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() : Map<number, mail.GlobalMail> { return this._dataMap; }
    getDataList() : mail.GlobalMail[] { return this._dataList; }

    get(key : number) : mail.GlobalMail  { return this._dataMap.get(key); }

    resolve(_tables : Map<string, any>) : void {
        for(var v of this._dataList) {
            v.resolve(_tables);
        }
    }


}
}


   
namespace role {
export class TbRoleLevelExpAttr{
    private _dataMap : Map<number, role.LevelExpAttr>;
    private _dataList : role.LevelExpAttr[];
    
    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, role.LevelExpAttr>();
        this._dataList = [];
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v : role.LevelExpAttr;
            _v = new role.LevelExpAttr(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.level, _v);
        }
    }

    getDataMap() : Map<number, role.LevelExpAttr> { return this._dataMap; }
    getDataList() : role.LevelExpAttr[] { return this._dataList; }

    get(key : number) : role.LevelExpAttr  { return this._dataMap.get(key); }

    resolve(_tables : Map<string, any>) : void {
        for(var v of this._dataList) {
            v.resolve(_tables);
        }
    }


}
}


   
namespace role {
export class TbRoleLevelBonusCoefficient{
    private _dataMap : Map<number, role.LevelBonus>;
    private _dataList : role.LevelBonus[];
    
    constructor(_buf_ : Bright.Serialization.ByteBuf) {
        this._dataMap = new Map<number, role.LevelBonus>();
        this._dataList = [];
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v : role.LevelBonus;
            _v = new role.LevelBonus(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() : Map<number, role.LevelBonus> { return this._dataMap; }
    getDataList() : role.LevelBonus[] { return this._dataList; }

    get(key : number) : role.LevelBonus  { return this._dataMap.get(key); }

    resolve(_tables : Map<string, any>) : void {
        for(var v of this._dataList) {
            v.resolve(_tables);
        }
    }


}
}




type ByteBufLoader = (file : string) => Bright.Serialization.ByteBuf

export class Tables {
    private _TbBlackboard : ai.TbBlackboard;
    get TbBlackboard() : ai.TbBlackboard  { return this._TbBlackboard;}
    private _TbBehaviorTree : ai.TbBehaviorTree;
    get TbBehaviorTree() : ai.TbBehaviorTree  { return this._TbBehaviorTree;}
    private _TbClazz : blueprint.TbClazz;
    get TbClazz() : blueprint.TbClazz  { return this._TbClazz;}
    private _TbDrop : bonus.TbDrop;
    get TbDrop() : bonus.TbDrop  { return this._TbDrop;}
    private _TbGlobalConfig : common.TbGlobalConfig;
    get TbGlobalConfig() : common.TbGlobalConfig  { return this._TbGlobalConfig;}
    private _TbDummy : common.TbDummy;
    get TbDummy() : common.TbDummy  { return this._TbDummy;}
    private _TbErrorInfo : error.TbErrorInfo;
    get TbErrorInfo() : error.TbErrorInfo  { return this._TbErrorInfo;}
    private _TbCodeInfo : error.TbCodeInfo;
    get TbCodeInfo() : error.TbCodeInfo  { return this._TbCodeInfo;}
    private _TbItem : item.TbItem;
    get TbItem() : item.TbItem  { return this._TbItem;}
    private _TbItemFunc : item.TbItemFunc;
    get TbItemFunc() : item.TbItemFunc  { return this._TbItemFunc;}
    private _TbItemExtra : item.TbItemExtra;
    get TbItemExtra() : item.TbItemExtra  { return this._TbItemExtra;}
    private _TbSystemMail : mail.TbSystemMail;
    get TbSystemMail() : mail.TbSystemMail  { return this._TbSystemMail;}
    private _TbGlobalMail : mail.TbGlobalMail;
    get TbGlobalMail() : mail.TbGlobalMail  { return this._TbGlobalMail;}
    private _TbRoleLevelExpAttr : role.TbRoleLevelExpAttr;
    get TbRoleLevelExpAttr() : role.TbRoleLevelExpAttr  { return this._TbRoleLevelExpAttr;}
    private _TbRoleLevelBonusCoefficient : role.TbRoleLevelBonusCoefficient;
    get TbRoleLevelBonusCoefficient() : role.TbRoleLevelBonusCoefficient  { return this._TbRoleLevelBonusCoefficient;}

    constructor(loader : ByteBufLoader) {
        let tables = new Map<string, any>();
        this._TbBlackboard = new ai.TbBlackboard(loader('ai.TbBlackboard.bin')); 
        tables.set('ai.TbBlackboard', this._TbBlackboard);
        this._TbBehaviorTree = new ai.TbBehaviorTree(loader('ai.TbBehaviorTree.bin')); 
        tables.set('ai.TbBehaviorTree', this._TbBehaviorTree);
        this._TbClazz = new blueprint.TbClazz(loader('blueprint.TbClazz.bin')); 
        tables.set('blueprint.TbClazz', this._TbClazz);
        this._TbDrop = new bonus.TbDrop(loader('bonus.TbDrop.bin')); 
        tables.set('bonus.TbDrop', this._TbDrop);
        this._TbGlobalConfig = new common.TbGlobalConfig(loader('common.TbGlobalConfig.bin')); 
        tables.set('common.TbGlobalConfig', this._TbGlobalConfig);
        this._TbDummy = new common.TbDummy(loader('common.TbDummy.bin')); 
        tables.set('common.TbDummy', this._TbDummy);
        this._TbErrorInfo = new error.TbErrorInfo(loader('error.TbErrorInfo.bin')); 
        tables.set('error.TbErrorInfo', this._TbErrorInfo);
        this._TbCodeInfo = new error.TbCodeInfo(loader('error.TbCodeInfo.bin')); 
        tables.set('error.TbCodeInfo', this._TbCodeInfo);
        this._TbItem = new item.TbItem(loader('item.TbItem.bin')); 
        tables.set('item.TbItem', this._TbItem);
        this._TbItemFunc = new item.TbItemFunc(loader('item.TbItemFunc.bin')); 
        tables.set('item.TbItemFunc', this._TbItemFunc);
        this._TbItemExtra = new item.TbItemExtra(loader('item.TbItemExtra.bin')); 
        tables.set('item.TbItemExtra', this._TbItemExtra);
        this._TbSystemMail = new mail.TbSystemMail(loader('mail.TbSystemMail.bin')); 
        tables.set('mail.TbSystemMail', this._TbSystemMail);
        this._TbGlobalMail = new mail.TbGlobalMail(loader('mail.TbGlobalMail.bin')); 
        tables.set('mail.TbGlobalMail', this._TbGlobalMail);
        this._TbRoleLevelExpAttr = new role.TbRoleLevelExpAttr(loader('role.TbRoleLevelExpAttr.bin')); 
        tables.set('role.TbRoleLevelExpAttr', this._TbRoleLevelExpAttr);
        this._TbRoleLevelBonusCoefficient = new role.TbRoleLevelBonusCoefficient(loader('role.TbRoleLevelBonusCoefficient.bin')); 
        tables.set('role.TbRoleLevelBonusCoefficient', this._TbRoleLevelBonusCoefficient);

        this._TbBlackboard.resolve(tables); 
        this._TbBehaviorTree.resolve(tables); 
        this._TbClazz.resolve(tables); 
        this._TbDrop.resolve(tables); 
        this._TbGlobalConfig.resolve(tables); 
        this._TbDummy.resolve(tables); 
        this._TbErrorInfo.resolve(tables); 
        this._TbCodeInfo.resolve(tables); 
        this._TbItem.resolve(tables); 
        this._TbItemFunc.resolve(tables); 
        this._TbItemExtra.resolve(tables); 
        this._TbSystemMail.resolve(tables); 
        this._TbGlobalMail.resolve(tables); 
        this._TbRoleLevelExpAttr.resolve(tables); 
        this._TbRoleLevelBonusCoefficient.resolve(tables); 
    }
}


}